{"version":3,"sources":["images/biscord.png","stores/UserStore.js","SubmitButton.js","ChatPage/Chat.js","ChatPage/SideBar.js","ChatPage/ChatPage.js","InputField.js","LoginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","extendObservable","this","loading","isLoggedIn","username","SubmitButton","className","disabled","props","onClick","text","React","Component","socket","socketIOClient","Chat","handleSubmit","e","preventDefault","message","document","getElementById","value","chatHistory","state","messageHistory","push","setState","emit","resetSubmit","on","data","name","id","autoComplete","onSubmit","type","SideBar","users","usernames","tempArray","forEach","ChatPage","doLogout","InputField","placeholder","onChange","target","LoginForm","password","buttonDisabled","property","val","trim","replace","length","fetch","method","headers","body","JSON","stringify","res","json","result","success","console","log","userExists","alert","resetForm","msg","UserStore","src","logo","alt","setInputValue","doLogin","handleSignUp","App","error","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e0ace4e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biscord.64b73548.png\";","import { extendObservable } from 'mobx';\n\n/**\n * UserStore\n */\n\n class UserStore {\n     constructor() {\n         extendObservable(this, {\n             loading: true,\n             isLoggedIn: false,\n             username: ''\n         })\n     }\n }\n\n export default new UserStore();","import React from 'react';\n\nclass SubmitButton extends React.Component {\n\n  render() {\n    return (\n      <div className=\"submitButton\">\n        <button\n            className = 'btn'\n            disabled = {this.props.disabled}\n            onClick = { () => this.props.onClick() }\n        >\n            {this.props.text}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default SubmitButton;\n","import React from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './Chat.css';\n\nconst ENDPOINT = \"24.57.124.99:3001\";    // this is just my local ip address, socket uses 3001 port on my app\nconst socket = socketIOClient(ENDPOINT);\n\nclass Chat extends React.Component {\n \n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            messageHistory: []      // this is displayed as a div.\n        }\n    }\n\n    componentDidMount() {\n        socket.emit('new-user', this.props.username);   // tells everyone this user is here\n    \n        socket.on('chat-message', data => { // broadcasted message from someone\n            let chatHistory = this.state.messageHistory;\n            chatHistory.push(<div>{data.name}: {data.message}</div>);\n            this.setState({ messageHistory: chatHistory });\n        });\n\n        socket.on('disconnect-message', name => {\n            let chatHistory = this.state.messageHistory;\n            chatHistory.push(<div>{name} disconnected</div>);\n            this.setState({ messageHistory: chatHistory });\n        })\n    \n        socket.on('user-connected', username => {   // tells us when another connects\n            let chatHistory = this.state.messageHistory;\n            chatHistory.push(<div>{username} connected</div>);\n            this.setState({ messageHistory: chatHistory });\n        });\n    }\n\n    componentWillUnmount()\n    {\n        socket.emit('user-disconnecting', this.props.username);  // tell everyone else when we disconnect\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let message = document.getElementById('message-input').value;\n\n        let chatHistory = this.state.messageHistory;\n        chatHistory.push(<div>{this.props.username}: {message}</div>);\n        this.setState({ messageHistory: chatHistory });\n\n        socket.emit('send-chat-message', message)   // gives everybody a message we sent\n        this.resetSubmit();\n    }\n\n    resetSubmit = () => {\n        document.getElementById('message-input').value = '';\n    }\n\n    render()\n    {\n        return (\n            <div className=\"chat-container\">\n                <div className=\"message-container\" id=\"message-container\">{this.state.messageHistory}</div>\n                <form autoComplete=\"off\" className=\"send-container\" id=\"send-container\" onSubmit={(e) => this.handleSubmit(e)}>\n                    <input type=\"text\" id=\"message-input\"></input>\n                </form>\n            </div>\n        )\n    }\n\n}\n \nexport default Chat;","import React from 'react'\nimport socketIOClient from 'socket.io-client';\nimport './SideBar.css';\n\nconst ENDPOINT = \"24.57.124.99:3001\";    // this is just my local ip address, socket uses 3001 port on my app\nconst socket = socketIOClient(ENDPOINT);\n\nclass SideBar extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            users: []\n        }\n    }\n\n    componentDidMount() \n    {\n        socket.on('current-users', (usernames) => {\n            let tempArray = [];\n            usernames.forEach(username => {\n                tempArray.push(<div>{username}</div>);  // get each username\n            });                                         // from backend and\n            this.setState({ users: tempArray });        // deposit in divs\n        })                                              // when a user connects\n    }\n\n    render() \n    {\n        return (\n            <div className=\"users\">\n                {this.state.users}\n            </div>\n        )\n    }\n\n}\n\nexport default SideBar;","import React from 'react';\nimport SubmitButton from '../SubmitButton';\nimport Chat from './Chat';\nimport SideBar from './SideBar';\nimport './ChatPage.css';\n\nfunction ChatPage({ doLogout, username }){\n\n    if (username)\n    {\n      return (\n        <div className=\"container\">\n          <div className=\"header\">\n            <div className=\"username\" >\n              {username ? username : 'NameNotFound'}\n            </div>\n            <div className=\"logOutButton\">\n              <SubmitButton\n                text={'Log Out'}\n                disabled={false}\n                onClick={() => doLogout()}\n              />\n            </div>\n          </div>\n          <div className=\"chatContainer\">\n            <div className=\"chat\">\n              <Chat username={username} />\n            </div>\n            <div className=\"sidebar\">\n              <SideBar username={username} />\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    else return (\n      <div className=\"logOutButton\">\n        <h1>fucky wucky</h1>\n        <SubmitButton\n          text={'Log Out'}\n          disabled={false}\n          onClick={() => doLogout()}\n        />\n      </div>\n    )\n    \n}\n\nexport default ChatPage;","import React from 'react';\n\nclass InputField extends React.Component {\n\n  render() {\n    return (\n      <div className=\"inputField\">\n        <input\n            className = 'input'\n            type = {this.props.type}\n            placeholder = {this.props.placeholder}\n            value = {this.props.value}\n            onChange = { (e) => this.props.onChange(e.target.value) }\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default InputField;\n","import React from 'react';\nimport InputField from '../InputField';\nimport SubmitButton from '../SubmitButton';\nimport UserStore from '../stores/UserStore';\n\nimport './LoginForm.css';\n\nimport logo from '../images/biscord.png';\n\nclass LoginForm extends React.Component {\n\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim();\n        val = val.replace(/[^A-Za-z0-9]/g, '');\n        if (val.length > 12) {\n            return;\n        }\n        \n        this.setState({\n            [property]: val\n        })\n\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async userExists(username)\n    {\n        try {\n            let res = await fetch('./userexists', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username\n                })\n            })\n\n            let result = await res.json();\n\n            if (result.success)\n            {\n                return true;\n            }\n            else if (!result.success)\n            {\n                return false;\n            }\n        }\n        catch (e)\n        {\n            console.log(e);\n        }\n\n    }\n\n    async handleSignUp() {\n\n        let doesUserExist = await this.userExists();\n\n        if (doesUserExist === true)\n        {\n            alert(\"User already exists\");\n            this.resetForm();\n            return;\n        }\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./signup', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            // tell the user whether it failed or not\n            let result = await res.json();\n            this.resetForm();\n            alert(result.msg);\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n    async doLogin() {\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            let result = await res.json();\n\n            if (result && result.success) {\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n\n            else if (result && result.success === false){\n                this.resetForm();\n                alert(result.msg);\n            }\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n  render() {\n    return (\n        <div className=\"LoginForm\">\n\n            <img className=\"logo\" src={logo} alt=\"\" />\n\n            <InputField\n                type = 'text'\n                placeholder = 'Username'\n                value = {this.state.username ? this.state.username : ''}\n                onChange = { (val) => this.setInputValue('username', val) }\n            />\n\n            <InputField\n                type = 'password'\n                placeholder = 'Password'\n                value = {this.state.password ? this.state.password : ''}\n                onChange = { (val) => this.setInputValue('password', val) }\n            />\n\n            <SubmitButton \n                text = 'Login'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.doLogin() }\n            />\n\n            <SubmitButton \n                text = 'Sign Up'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.handleSignUp() }\n            />\n        \n        </div>\n    );\n  }\n\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { observer } from 'mobx-react'; \nimport UserStore from './stores/UserStore';\nimport ChatPage from './ChatPage/ChatPage';\nimport LoginForm from './LoginForm/LoginForm';\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n    try {\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    }\n\n    catch(e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n    }\n\n    catch(e) {\n      console.error(e);\n    }\n  }\n\n  render() {\n\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className = 'container'>\n            Loading, please wait...\n          </div>\n        </div>\n      );\n    }\n\n    else {\n\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className = 'container'>\n              <ChatPage username={UserStore.username} doLogout={this.doLogout} />\n            </div>\n          </div>\n        );\n      }\n\n      else {\n        return (\n          <div className=\"app\">\n            <div className = 'container'>\n              <LoginForm />\n            </div>\n          </div>\n        );\n      }\n\n    }\n\n  }\n\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}