{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = build;\nexports.usage = 'Attempts to compile the module by dispatching to node-gyp or nw-gyp';\n\nvar napi = require('./util/napi.js');\n\nvar compile = require('./util/compile.js');\n\nvar handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nvar configure = require('./configure.js');\n\nfunction do_build(gyp, argv, callback) {\n  handle_gyp_opts(gyp, argv, function (err, result) {\n    var final_args = ['build'].concat(result.gyp).concat(result.pre);\n\n    if (result.unparsed.length > 0) {\n      final_args = final_args.concat(['--']).concat(result.unparsed);\n    }\n\n    if (!err && result.opts.napi_build_version) {\n      napi.swap_build_dir_in(result.opts.napi_build_version);\n    }\n\n    compile.run_gyp(final_args, result.opts, function (err) {\n      if (result.opts.napi_build_version) {\n        napi.swap_build_dir_out(result.opts.napi_build_version);\n      }\n\n      return callback(err);\n    });\n  });\n}\n\nfunction build(gyp, argv, callback) {\n  // Form up commands to pass to node-gyp:\n  // We map `node-pre-gyp build` to `node-gyp configure build` so that we do not\n  // trigger a clean and therefore do not pay the penalty of a full recompile\n  if (argv.length && argv.indexOf('rebuild') > -1) {\n    argv.shift(); // remove `rebuild`\n    // here we map `node-pre-gyp rebuild` to `node-gyp rebuild` which internally means\n    // \"clean + configure + build\" and triggers a full recompile\n\n    compile.run_gyp(['clean'], {}, function (err) {\n      if (err) return callback(err);\n      configure(gyp, argv, function (err) {\n        if (err) return callback(err);\n        return do_build(gyp, argv, callback);\n      });\n    });\n  } else {\n    return do_build(gyp, argv, callback);\n  }\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/build.js"],"names":["module","exports","build","usage","napi","require","compile","handle_gyp_opts","configure","do_build","gyp","argv","callback","err","result","final_args","concat","pre","unparsed","length","opts","napi_build_version","swap_build_dir_in","run_gyp","swap_build_dir_out","indexOf","shift"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,KAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,qEAAhB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,gBAAD,CAAvB;;AAEA,SAASI,QAAT,CAAkBC,GAAlB,EAAsBC,IAAtB,EAA2BC,QAA3B,EAAqC;AACjCL,EAAAA,eAAe,CAACG,GAAD,EAAKC,IAAL,EAAU,UAASE,GAAT,EAAaC,MAAb,EAAqB;AAC1C,QAAIC,UAAU,GAAG,CAAC,OAAD,EAAUC,MAAV,CAAiBF,MAAM,CAACJ,GAAxB,EAA6BM,MAA7B,CAAoCF,MAAM,CAACG,GAA3C,CAAjB;;AACA,QAAIH,MAAM,CAACI,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC5BJ,MAAAA,UAAU,GAAGA,UAAU,CACTC,MADD,CACQ,CAAC,IAAD,CADR,EAECA,MAFD,CAEQF,MAAM,CAACI,QAFf,CAAb;AAGH;;AACD,QAAI,CAACL,GAAD,IAAQC,MAAM,CAACM,IAAP,CAAYC,kBAAxB,EAA4C;AACxCjB,MAAAA,IAAI,CAACkB,iBAAL,CAAuBR,MAAM,CAACM,IAAP,CAAYC,kBAAnC;AACH;;AACDf,IAAAA,OAAO,CAACiB,OAAR,CAAgBR,UAAhB,EAA2BD,MAAM,CAACM,IAAlC,EAAuC,UAASP,GAAT,EAAc;AACjD,UAAIC,MAAM,CAACM,IAAP,CAAYC,kBAAhB,EAAoC;AAChCjB,QAAAA,IAAI,CAACoB,kBAAL,CAAwBV,MAAM,CAACM,IAAP,CAAYC,kBAApC;AACH;;AACD,aAAOT,QAAQ,CAACC,GAAD,CAAf;AACH,KALD;AAMH,GAhBc,CAAf;AAiBH;;AAED,SAASX,KAAT,CAAeQ,GAAf,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AAEhC;AACA;AACA;AACA,MAAID,IAAI,CAACQ,MAAL,IAAgBR,IAAI,CAACc,OAAL,CAAa,SAAb,IAA0B,CAAC,CAA/C,EAAmD;AAC/Cd,IAAAA,IAAI,CAACe,KAAL,GAD+C,CACjC;AACd;AACA;;AACApB,IAAAA,OAAO,CAACiB,OAAR,CAAgB,CAAC,OAAD,CAAhB,EAA0B,EAA1B,EAA6B,UAASV,GAAT,EAAc;AACvC,UAAIA,GAAJ,EAAS,OAAOD,QAAQ,CAACC,GAAD,CAAf;AACTL,MAAAA,SAAS,CAACE,GAAD,EAAKC,IAAL,EAAU,UAASE,GAAT,EAAc;AAC7B,YAAIA,GAAJ,EAAS,OAAOD,QAAQ,CAACC,GAAD,CAAf;AACT,eAAOJ,QAAQ,CAACC,GAAD,EAAKC,IAAL,EAAUC,QAAV,CAAf;AACH,OAHQ,CAAT;AAIH,KAND;AAOH,GAXD,MAWO;AACH,WAAOH,QAAQ,CAACC,GAAD,EAAKC,IAAL,EAAUC,QAAV,CAAf;AACH;AACJ","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = build;\n\nexports.usage = 'Attempts to compile the module by dispatching to node-gyp or nw-gyp';\n\nvar napi = require('./util/napi.js');\nvar compile = require('./util/compile.js');\nvar handle_gyp_opts = require('./util/handle_gyp_opts.js');\nvar configure = require('./configure.js');\n\nfunction do_build(gyp,argv,callback) {\n    handle_gyp_opts(gyp,argv,function(err,result) {\n        var final_args = ['build'].concat(result.gyp).concat(result.pre);\n        if (result.unparsed.length > 0) {\n            final_args = final_args.\n                          concat(['--']).\n                          concat(result.unparsed);\n        }\n        if (!err && result.opts.napi_build_version) {\n            napi.swap_build_dir_in(result.opts.napi_build_version);\n        }\n        compile.run_gyp(final_args,result.opts,function(err) {\n            if (result.opts.napi_build_version) {\n                napi.swap_build_dir_out(result.opts.napi_build_version);\n            }\n            return callback(err);\n        });\n    });\n}\n\nfunction build(gyp, argv, callback) {\n\n    // Form up commands to pass to node-gyp:\n    // We map `node-pre-gyp build` to `node-gyp configure build` so that we do not\n    // trigger a clean and therefore do not pay the penalty of a full recompile\n    if (argv.length && (argv.indexOf('rebuild') > -1)) {\n        argv.shift(); // remove `rebuild`\n        // here we map `node-pre-gyp rebuild` to `node-gyp rebuild` which internally means\n        // \"clean + configure + build\" and triggers a full recompile\n        compile.run_gyp(['clean'],{},function(err) {\n            if (err) return callback(err);\n            configure(gyp,argv,function(err) {\n                if (err) return callback(err);\n                return do_build(gyp,argv,callback);\n            });\n        });\n    } else {\n        return do_build(gyp,argv,callback);        \n    }\n}\n"]},"metadata":{},"sourceType":"script"}