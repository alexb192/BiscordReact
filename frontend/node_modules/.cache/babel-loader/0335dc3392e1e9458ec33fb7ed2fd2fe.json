{"ast":null,"code":"/* eslint-disable node/no-deprecated-api */\n'use strict';\n\nconst semver = require('semver');\n\nconst url = require('url');\n\nconst path = require('path');\n\nconst log = require('npmlog'); // versions where -headers.tar.gz started shipping\n\n\nconst headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42';\nconst bitsre = /\\/win-(x86|x64|arm64)\\//;\nconst bitsreV3 = /\\/win-(x86|ia32|x64)\\//; // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n// Captures all the logic required to determine download URLs, local directory and\n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\n\nfunction processRelease(argv, gyp, defaultVersion, defaultRelease) {\n  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion;\n  var versionSemver = semver.parse(version);\n  var overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl;\n  var isDefaultVersion;\n  var isNamedForLegacyIojs;\n  var name;\n  var distBaseUrl;\n  var baseUrl;\n  var libUrl32;\n  var libUrl64;\n  var libUrlArm64;\n  var tarballUrl;\n  var canGetHeaders;\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return {\n      version: version\n    };\n  } // flatten version into String\n\n\n  version = versionSemver.version; // defaultVersion should come from process.version so ought to be valid semver\n\n  isDefaultVersion = version === semver.parse(defaultVersion).version; // can't use process.release if we're using --target=x.y.z\n\n  if (!isDefaultVersion) {\n    defaultRelease = null;\n  }\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs'); // remove the '.' for directory naming purposes\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isNamedForLegacyIojs = versionSemver.major >= 1 && versionSemver.major < 4; // isNamedForLegacyIojs is required to support Electron < 4 (in particular Electron 3)\n    // as previously this logic was used to ensure \"iojs\" was used to download iojs releases\n    // and \"node\" for node releases.  Unfortunately the logic was broad enough that electron@3\n    // published release assets as \"iojs\" so that the node-gyp logic worked.  Once Electron@3 has\n    // been EOL for a while (late 2019) we should remove this hack.\n\n    name = isNamedForLegacyIojs ? 'iojs' : 'node';\n  } // check for the nvm.sh standard mirror env variables\n\n\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR;\n  }\n\n  if (overrideDistUrl) {\n    log.verbose('download', 'using dist-url', overrideDistUrl);\n  }\n\n  if (overrideDistUrl) {\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '');\n  } else {\n    distBaseUrl = 'https://nodejs.org/dist';\n  }\n\n  distBaseUrl += '/v' + version + '/'; // new style, based on process.release so we have a lot of the data we need\n\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './');\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);\n    libUrlArm64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'arm64', versionSemver.major);\n    tarballUrl = defaultRelease.headersUrl;\n  } else {\n    // older versions without process.release are captured here and we have to make\n    // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n    // current process.release\n    baseUrl = distBaseUrl;\n    libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major);\n    libUrlArm64 = resolveLibUrl(name, baseUrl, 'arm64', versionSemver.major); // making the bold assumption that anything with a version number >3.0.0 will\n    // have a *-headers.tar.gz file in its dist location, even some frankenstein\n    // custom version\n\n    canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);\n    tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');\n  }\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    ia32: {\n      libUrl: libUrl32,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path))\n    },\n    x64: {\n      libUrl: libUrl64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    },\n    arm64: {\n      libUrl: libUrlArm64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrlArm64).path))\n    }\n  };\n}\n\nfunction normalizePath(p) {\n  return path.normalize(p).replace(/\\\\/g, '/');\n}\n\nfunction resolveLibUrl(name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './');\n  var hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) {\n      return url.resolve(base, 'win-' + arch + '/' + name + '.lib');\n    } // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n\n\n    return url.resolve(base, (arch === 'x86' ? '' : arch + '/') + name + '.lib');\n  } // else we have a proper url to a .lib, just make sure it's the right arch\n\n\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');\n}\n\nmodule.exports = processRelease;","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/lib/process-release.js"],"names":["semver","require","url","path","log","headersTarballRange","bitsre","bitsreV3","processRelease","argv","gyp","defaultVersion","defaultRelease","version","valid","opts","target","versionSemver","parse","overrideDistUrl","disturl","isDefaultVersion","isNamedForLegacyIojs","name","distBaseUrl","baseUrl","libUrl32","libUrl64","libUrlArm64","tarballUrl","canGetHeaders","replace","major","process","env","NODEJS_ORG_MIRROR","verbose","headersUrl","resolve","resolveLibUrl","libUrl","satisfies","shasumsUrl","versionDir","ia32","libPath","normalizePath","relative","x64","arm64","p","normalize","defaultUrl","arch","versionMajor","base","hasLibUrl","test","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nconst semver = require('semver')\nconst url = require('url')\nconst path = require('path')\nconst log = require('npmlog')\n\n// versions where -headers.tar.gz started shipping\nconst headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'\nconst bitsre = /\\/win-(x86|x64|arm64)\\//\nconst bitsreV3 = /\\/win-(x86|ia32|x64)\\// // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and\n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease (argv, gyp, defaultVersion, defaultRelease) {\n  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion\n  var versionSemver = semver.parse(version)\n  var overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl\n  var isDefaultVersion\n  var isNamedForLegacyIojs\n  var name\n  var distBaseUrl\n  var baseUrl\n  var libUrl32\n  var libUrl64\n  var libUrlArm64\n  var tarballUrl\n  var canGetHeaders\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return { version: version }\n  }\n  // flatten version into String\n  version = versionSemver.version\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion) {\n    defaultRelease = null\n  }\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs') // remove the '.' for directory naming purposes\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isNamedForLegacyIojs = versionSemver.major >= 1 && versionSemver.major < 4\n    // isNamedForLegacyIojs is required to support Electron < 4 (in particular Electron 3)\n    // as previously this logic was used to ensure \"iojs\" was used to download iojs releases\n    // and \"node\" for node releases.  Unfortunately the logic was broad enough that electron@3\n    // published release assets as \"iojs\" so that the node-gyp logic worked.  Once Electron@3 has\n    // been EOL for a while (late 2019) we should remove this hack.\n    name = isNamedForLegacyIojs ? 'iojs' : 'node'\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n  if (overrideDistUrl) {\n    log.verbose('download', 'using dist-url', overrideDistUrl)\n  }\n\n  if (overrideDistUrl) {\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '')\n  } else {\n    distBaseUrl = 'https://nodejs.org/dist'\n  }\n  distBaseUrl += '/v' + version + '/'\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './')\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major)\n    libUrlArm64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'arm64', versionSemver.major)\n    tarballUrl = defaultRelease.headersUrl\n  } else {\n    // older versions without process.release are captured here and we have to make\n    // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n    // current process.release\n    baseUrl = distBaseUrl\n    libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major)\n    libUrlArm64 = resolveLibUrl(name, baseUrl, 'arm64', versionSemver.major)\n\n    // making the bold assumption that anything with a version number >3.0.0 will\n    // have a *-headers.tar.gz file in its dist location, even some frankenstein\n    // custom version\n    canGetHeaders = semver.satisfies(versionSemver, headersTarballRange)\n    tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz')\n  }\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    ia32: {\n      libUrl: libUrl32,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path))\n    },\n    x64: {\n      libUrl: libUrl64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    },\n    arm64: {\n      libUrl: libUrlArm64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrlArm64).path))\n    }\n  }\n}\n\nfunction normalizePath (p) {\n  return path.normalize(p).replace(/\\\\/g, '/')\n}\n\nfunction resolveLibUrl (name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './')\n  var hasLibUrl = bitsre.test(defaultUrl) || (versionMajor === 3 && bitsreV3.test(defaultUrl))\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) {\n      return url.resolve(base, 'win-' + arch + '/' + name + '.lib')\n    }\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x86' ? '' : arch + '/') + name + '.lib')\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/')\n}\n\nmodule.exports = processRelease\n"]},"metadata":{},"sourceType":"script"}