{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = handle_gyp_opts;\n\nvar fs = require('fs');\n\nvar versioning = require('./versioning.js');\n\nvar napi = require('./napi.js');\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\n\n\nvar share_with_node_gyp = ['module', 'module_name', 'module_path', 'napi_version', 'node_abi_napi', 'napi_build_version', 'node_napi_label'];\n\nfunction handle_gyp_opts(gyp, argv, callback) {\n  // Collect node-pre-gyp specific variables to pass to node-gyp\n  var node_pre_gyp_options = []; // generate custom node-pre-gyp versioning info\n\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(JSON.parse(fs.readFileSync('./package.json')), gyp.opts, napi_build_version);\n  share_with_node_gyp.forEach(function (key) {\n    var val = opts[key];\n\n    if (val) {\n      node_pre_gyp_options.push('--' + key + '=' + val);\n    } else if (key === 'napi_build_version') {\n      node_pre_gyp_options.push('--' + key + '=0');\n    } else {\n      if (key !== 'napi_version' && key !== 'node_abi_napi') return callback(new Error(\"Option \" + key + \" required but not found by node-pre-gyp\"));\n    }\n  }); // Collect options that follow the special -- which disables nopt parsing\n\n  var unparsed_options = [];\n  var double_hyphen_found = false;\n  gyp.opts.argv.original.forEach(function (opt) {\n    if (double_hyphen_found) {\n      unparsed_options.push(opt);\n    }\n\n    if (opt == '--') {\n      double_hyphen_found = true;\n    }\n  }); // We try respect and pass through remaining command\n  // line options (like --foo=bar) to node-gyp\n\n  var cooked = gyp.opts.argv.cooked;\n  var node_gyp_options = [];\n  cooked.forEach(function (value) {\n    if (value.length > 2 && value.slice(0, 2) == '--') {\n      var key = value.slice(2);\n      var val = cooked[cooked.indexOf(value) + 1];\n\n      if (val && val.indexOf('--') === -1) {\n        // handle '--foo=bar' or ['--foo','bar']\n        node_gyp_options.push('--' + key + '=' + val);\n      } else {\n        // pass through --foo\n        node_gyp_options.push(value);\n      }\n    }\n  });\n  var result = {\n    'opts': opts,\n    'gyp': node_gyp_options,\n    'pre': node_pre_gyp_options,\n    'unparsed': unparsed_options\n  };\n  return callback(null, result);\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/util/handle_gyp_opts.js"],"names":["module","exports","handle_gyp_opts","fs","require","versioning","napi","share_with_node_gyp","gyp","argv","callback","node_pre_gyp_options","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","JSON","parse","readFileSync","forEach","key","val","push","Error","unparsed_options","double_hyphen_found","original","opt","cooked","node_gyp_options","value","length","slice","indexOf","result"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = handle_gyp_opts;\n\nvar fs = require('fs');\nvar versioning = require('./versioning.js');\nvar napi = require('./napi.js');\n\n/*\n\nHere we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.\n\nWe massage the args and options slightly to account for differences in what commands mean between\nnode-pre-gyp and node-gyp (e.g. see the difference between \"build\" and \"rebuild\" below)\n\nKeep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether\nnode-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.\n\nWe also try to preserve any command line options that might have been passed to npm or node-pre-gyp.\nBut this is fairly difficult without passing way to much through. For example `gyp.opts` contains all\nthe process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have\nto be very selective about what we pass through.\n\nFor example:\n\n`npm install --build-from-source` will give:\n\nargv == [ 'rebuild' ]\ngyp.opts.argv == { remain: [ 'install' ],\n  cooked: [ 'install', '--fallback-to-build' ],\n  original: [ 'install', '--fallback-to-build' ] }\n\n`./bin/node-pre-gyp build` will give:\n\nargv == []\ngyp.opts.argv == { remain: [ 'build' ],\n  cooked: [ 'build' ],\n  original: [ '-C', 'test/app1', 'build' ] }\n\n*/\n\n// select set of node-pre-gyp versioning info\n// to share with node-gyp\nvar share_with_node_gyp = [\n  'module',\n  'module_name',\n  'module_path',\n  'napi_version',\n  'node_abi_napi',\n  'napi_build_version',\n  'node_napi_label'\n];\n\nfunction handle_gyp_opts(gyp, argv, callback) {\n\n    // Collect node-pre-gyp specific variables to pass to node-gyp\n    var node_pre_gyp_options = [];\n    // generate custom node-pre-gyp versioning info\n    var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n    var opts = versioning.evaluate(JSON.parse(fs.readFileSync('./package.json')), gyp.opts, napi_build_version);\n    share_with_node_gyp.forEach(function(key) {\n        var val = opts[key];\n        if (val) {\n            node_pre_gyp_options.push('--' + key + '=' + val);\n        } else if (key === 'napi_build_version') {\n            node_pre_gyp_options.push('--' + key + '=0');\n        } else {\n            if (key !== 'napi_version' && key !== 'node_abi_napi')\n                return callback(new Error(\"Option \" + key + \" required but not found by node-pre-gyp\"));\n        }\n    });\n\n    // Collect options that follow the special -- which disables nopt parsing\n    var unparsed_options = [];\n    var double_hyphen_found = false;\n    gyp.opts.argv.original.forEach(function(opt) {\n        if (double_hyphen_found) {\n            unparsed_options.push(opt);\n        }\n        if (opt == '--') {\n            double_hyphen_found = true;\n        }\n    });\n\n    // We try respect and pass through remaining command\n    // line options (like --foo=bar) to node-gyp\n    var cooked = gyp.opts.argv.cooked;\n    var node_gyp_options = [];\n    cooked.forEach(function(value) {\n        if (value.length > 2 && value.slice(0,2) == '--') {\n            var key = value.slice(2);\n            var val = cooked[cooked.indexOf(value)+1];\n            if (val && val.indexOf('--') === -1) { // handle '--foo=bar' or ['--foo','bar']\n                node_gyp_options.push('--' + key + '=' + val);\n            } else { // pass through --foo\n                node_gyp_options.push(value);\n            }\n        }\n    });\n\n    var result = {'opts':opts,'gyp':node_gyp_options,'pre':node_pre_gyp_options,'unparsed':unparsed_options};\n    return callback(null,result);\n}\n"]},"metadata":{},"sourceType":"script"}