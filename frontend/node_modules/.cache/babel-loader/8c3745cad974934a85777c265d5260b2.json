{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = unpublish;\nexports.usage = 'Lists all published binaries (requires aws-sdk)';\n\nvar fs = require('fs');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar s3_setup = require('./util/s3_setup.js');\n\nvar config = require('rc')(\"node_pre_gyp\", {\n  acl: \"public-read\"\n});\n\nfunction unpublish(gyp, argv, callback) {\n  var AWS = require(\"aws-sdk\");\n\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var opts = versioning.evaluate(package_json, gyp.opts);\n  s3_setup.detect(opts.hosted_path, config);\n  AWS.config.update(config);\n  var s3 = new AWS.S3();\n  var s3_opts = {\n    Bucket: config.bucket,\n    Prefix: config.prefix\n  };\n  s3.listObjects(s3_opts, function (err, meta) {\n    if (err && err.code == 'NotFound') {\n      return callback(new Error('[' + package_json.name + '] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + config.prefix));\n    } else if (err) {\n      return callback(err);\n    } else {\n      log.verbose(JSON.stringify(meta, null, 1));\n\n      if (meta && meta.Contents) {\n        meta.Contents.forEach(function (obj) {\n          console.log(obj.Key);\n        });\n      } else {\n        console.error('[' + package_json.name + '] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + config.prefix);\n      }\n\n      return callback();\n    }\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/info.js"],"names":["module","exports","unpublish","usage","fs","require","log","versioning","s3_setup","config","acl","gyp","argv","callback","AWS","package_json","JSON","parse","readFileSync","opts","evaluate","detect","hosted_path","update","s3","S3","s3_opts","Bucket","bucket","Prefix","prefix","listObjects","err","meta","code","Error","name","verbose","stringify","Contents","forEach","obj","console","Key","error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,SAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,iDAAhB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,IAAD,CAAP,CAAc,cAAd,EAA6B;AAACK,EAAAA,GAAG,EAAC;AAAL,CAA7B,CAAb;;AAEA,SAASR,SAAT,CAAmBS,GAAnB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACpC,MAAIC,GAAG,GAAGT,OAAO,CAAC,SAAD,CAAjB;;AACA,MAAIU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWb,EAAE,CAACc,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,MAAIC,IAAI,GAAGZ,UAAU,CAACa,QAAX,CAAoBL,YAApB,EAAkCJ,GAAG,CAACQ,IAAtC,CAAX;AACAX,EAAAA,QAAQ,CAACa,MAAT,CAAgBF,IAAI,CAACG,WAArB,EAAiCb,MAAjC;AACAK,EAAAA,GAAG,CAACL,MAAJ,CAAWc,MAAX,CAAkBd,MAAlB;AACA,MAAIe,EAAE,GAAI,IAAIV,GAAG,CAACW,EAAR,EAAV;AACA,MAAIC,OAAO,GAAG;AAAGC,IAAAA,MAAM,EAAElB,MAAM,CAACmB,MAAlB;AACGC,IAAAA,MAAM,EAAEpB,MAAM,CAACqB;AADlB,GAAd;AAGAN,EAAAA,EAAE,CAACO,WAAH,CAAeL,OAAf,EAAwB,UAASM,GAAT,EAAcC,IAAd,EAAmB;AACvC,QAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,IAAY,UAAvB,EAAmC;AAC/B,aAAOrB,QAAQ,CAAC,IAAIsB,KAAJ,CAAU,MAAIpB,YAAY,CAACqB,IAAjB,GAAsB,uBAAtB,GAAgDV,OAAO,CAACC,MAAxD,GAAiE,oBAAjE,GAAsFlB,MAAM,CAACqB,MAAvG,CAAD,CAAf;AACH,KAFD,MAEO,IAAGE,GAAH,EAAQ;AACX,aAAOnB,QAAQ,CAACmB,GAAD,CAAf;AACH,KAFM,MAEA;AACH1B,MAAAA,GAAG,CAAC+B,OAAJ,CAAYrB,IAAI,CAACsB,SAAL,CAAeL,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAAZ;;AACA,UAAIA,IAAI,IAAIA,IAAI,CAACM,QAAjB,EAA2B;AACvBN,QAAAA,IAAI,CAACM,QAAL,CAAcC,OAAd,CAAsB,UAASC,GAAT,EAAc;AAChCC,UAAAA,OAAO,CAACpC,GAAR,CAAYmC,GAAG,CAACE,GAAhB;AACH,SAFD;AAGH,OAJD,MAIO;AACHD,QAAAA,OAAO,CAACE,KAAR,CAAc,MAAI7B,YAAY,CAACqB,IAAjB,GAAsB,gCAAtB,GAAyDV,OAAO,CAACC,MAAjE,GAA0E,oBAA1E,GAA+FlB,MAAM,CAACqB,MAApH;AACH;;AACD,aAAOjB,QAAQ,EAAf;AACH;AACJ,GAhBD;AAiBH","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = unpublish;\n\nexports.usage = 'Lists all published binaries (requires aws-sdk)';\n\nvar fs = require('fs');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar s3_setup = require('./util/s3_setup.js');\nvar config = require('rc')(\"node_pre_gyp\",{acl:\"public-read\"});\n\nfunction unpublish(gyp, argv, callback) {\n    var AWS = require(\"aws-sdk\");\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var opts = versioning.evaluate(package_json, gyp.opts);\n    s3_setup.detect(opts.hosted_path,config);\n    AWS.config.update(config);\n    var s3 =  new AWS.S3();\n    var s3_opts = {  Bucket: config.bucket,\n                     Prefix: config.prefix\n                  };\n    s3.listObjects(s3_opts, function(err, meta){\n        if (err && err.code == 'NotFound') {\n            return callback(new Error('['+package_json.name+'] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix));\n        } else if(err) {\n            return callback(err);\n        } else {\n            log.verbose(JSON.stringify(meta,null,1));\n            if (meta && meta.Contents) {\n                meta.Contents.forEach(function(obj) {\n                    console.log(obj.Key);\n                });\n            } else {\n                console.error('['+package_json.name+'] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/'+config.prefix );\n            }\n            return callback();\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"script"}