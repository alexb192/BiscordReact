{"ast":null,"code":"var _jsxFileName = \"/home/n/React/login_biscord/frontend/src/LoginForm/LoginForm.js\";\nimport React from 'react';\nimport InputField from '../InputField';\nimport SubmitButton from '../SubmitButton';\nimport UserStore from '../stores/UserStore';\nimport './LoginForm.css';\nimport logo from '../images/biscord.png';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false\n    };\n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n\n    if (val.length > 12) {\n      return;\n    }\n\n    this.setState({\n      [property]: val\n    });\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false\n    });\n  }\n\n  async handleSignUp() {\n    await this.doLogin();\n\n    if (!this.state.username) {\n      return;\n    }\n\n    if (!this.state.password) {\n      return;\n    }\n\n    this.setState({\n      buttonDisabled: true\n    });\n\n    try {\n      let res = await fetch('./signup', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      }); // tell the user whether it failed or not\n\n      let result = await res.json();\n      this.resetForm();\n      alert(result.msg);\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  async doLogin() {\n    console.log('trying to log in');\n\n    if (!this.state.username) {\n      return;\n    }\n\n    if (!this.state.password) {\n      return;\n    }\n\n    this.setState({\n      buttonDisabled: true\n    });\n\n    try {\n      let res = await fetch('./login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n      }\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"LoginForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"logo\",\n      src: logo,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputField, {\n      type: \"text\",\n      placeholder: \"Username\",\n      value: this.state.username ? this.state.username : '',\n      onChange: val => this.setInputValue('username', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputField, {\n      type: \"password\",\n      placeholder: \"Password\",\n      value: this.state.password ? this.state.password : '',\n      onChange: val => this.setInputValue('password', val),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SubmitButton, {\n      text: \"Login\",\n      disabled: this.state.buttonDisabled,\n      onClick: () => this.doLogin(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SubmitButton, {\n      text: \"Sign Up\",\n      disabled: this.state.buttonDisabled,\n      onClick: () => this.handleSignUp(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/n/React/login_biscord/frontend/src/LoginForm/LoginForm.js"],"names":["React","InputField","SubmitButton","UserStore","logo","LoginForm","Component","constructor","props","state","username","password","buttonDisabled","setInputValue","property","val","trim","length","setState","resetForm","handleSignUp","doLogin","res","fetch","method","headers","body","JSON","stringify","result","json","alert","msg","e","console","log","success","isLoggedIn","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InputField from '../InputField';\nimport SubmitButton from '../SubmitButton';\nimport UserStore from '../stores/UserStore';\n\nimport './LoginForm.css';\n\nimport logo from '../images/biscord.png';\n\nclass LoginForm extends React.Component {\n\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            buttonDisabled: false\n        }\n    }\n\n    setInputValue(property, val) {\n        val = val.trim();\n        if (val.length > 12) {\n            return;\n        }\n        \n        this.setState({\n            [property]: val\n        })\n\n    }\n\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async handleSignUp() {\n\n        await(this.doLogin())\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./signup', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            // tell the user whether it failed or not\n            let result = await res.json();\n            this.resetForm();\n            alert(result.msg);\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n    async doLogin() {\n\n        console.log('trying to log in');\n\n        if (!this.state.username) {\n            return;\n        }\n\n        if (!this.state.password) {\n            return;\n        }\n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n\n            let res = await fetch('./login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n                })\n            })\n\n            let result = await res.json();\n\n            if (result && result.success) {\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            }\n\n            else if (result && result.success === false){\n                this.resetForm();\n                alert(result.msg);\n            }\n\n        }\n\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n\n    }\n\n  render() {\n    return (\n        <div className=\"LoginForm\">\n\n            <img className=\"logo\" src={logo} alt=\"\" />\n\n            <InputField\n                type = 'text'\n                placeholder = 'Username'\n                value = {this.state.username ? this.state.username : ''}\n                onChange = { (val) => this.setInputValue('username', val) }\n            />\n\n            <InputField\n                type = 'password'\n                placeholder = 'Password'\n                value = {this.state.password ? this.state.password : ''}\n                onChange = { (val) => this.setInputValue('password', val) }\n            />\n\n            <SubmitButton \n                text = 'Login'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.doLogin() }\n            />\n\n            <SubmitButton \n                text = 'Sign Up'\n                disabled = {this.state.buttonDisabled}\n                onClick = { () => this.handleSignUp() }\n            />\n        \n        </div>\n    );\n  }\n\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}