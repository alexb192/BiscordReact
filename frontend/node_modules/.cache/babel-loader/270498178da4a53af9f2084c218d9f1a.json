{"ast":null,"code":"'use strict';\n\nconst Buffer = require('./buffer.js'); // XXX: This shares a lot in common with extract.js\n// maybe some DRY opportunity here?\n// tar -t\n\n\nconst hlo = require('./high-level-opt.js');\n\nconst Parser = require('./parse.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst path = require('path');\n\nconst t = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') cb = opt_, files = null, opt_ = {};else if (Array.isArray(opt_)) files = opt_, opt_ = {};\n  if (typeof files === 'function') cb = files, files = null;\n  if (!files) files = [];else files = Array.from(files);\n  const opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') throw new TypeError('callback not supported for sync tar functions');\n  if (!opt.file && typeof cb === 'function') throw new TypeError('callback only supported with file option');\n  if (files.length) filesFilter(opt, files);\n  if (!opt.noResume) onentryFunction(opt);\n  return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);\n};\n\nconst onentryFunction = opt => {\n  const onentry = opt.onentry;\n  opt.onentry = onentry ? e => {\n    onentry(e);\n    e.resume();\n  } : e => e.resume();\n}; // construct a filter that limits the file entries listed\n// include child entries if a dir is included\n\n\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [f.replace(/\\/+$/, ''), true]));\n  const filter = opt.filter;\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.';\n    const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n\n  opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\\/+$/, '')) : file => mapHas(file.replace(/\\/+$/, ''));\n};\n\nconst listFileSync = opt => {\n  const p = list(opt);\n  const file = opt.file;\n  let threw = true;\n  let fd;\n\n  try {\n    const stat = fs.statSync(file);\n    const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n\n    if (stat.size < readSize) {\n      p.end(fs.readFileSync(file));\n    } else {\n      let pos = 0;\n      const buf = Buffer.allocUnsafe(readSize);\n      fd = fs.openSync(file, 'r');\n\n      while (pos < stat.size) {\n        let bytesRead = fs.readSync(fd, buf, 0, readSize, pos);\n        pos += bytesRead;\n        p.write(buf.slice(0, bytesRead));\n      }\n\n      p.end();\n    }\n\n    threw = false;\n  } finally {\n    if (threw && fd) try {\n      fs.closeSync(fd);\n    } catch (er) {}\n  }\n};\n\nconst listFile = (opt, cb) => {\n  const parse = new Parser(opt);\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const file = opt.file;\n  const p = new Promise((resolve, reject) => {\n    parse.on('error', reject);\n    parse.on('end', resolve);\n    fs.stat(file, (er, stat) => {\n      if (er) reject(er);else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(parse);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\n\nconst list = opt => new Parser(opt);","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/tar/lib/list.js"],"names":["Buffer","require","hlo","Parser","fs","fsm","path","t","module","exports","opt_","files","cb","Array","isArray","from","opt","sync","TypeError","file","length","filesFilter","noResume","onentryFunction","listFileSync","listFile","list","onentry","e","resume","map","Map","f","replace","filter","mapHas","r","root","parse","ret","has","get","dirname","set","entry","p","threw","fd","stat","statSync","readSize","maxReadSize","size","end","readFileSync","pos","buf","allocUnsafe","openSync","bytesRead","readSync","write","slice","closeSync","er","Promise","resolve","reject","on","stream","ReadStream","pipe","then"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Buffer = require('./buffer.js')\n\n// XXX: This shares a lot in common with extract.js\n// maybe some DRY opportunity here?\n\n// tar -t\nconst hlo = require('./high-level-opt.js')\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\n\nconst t = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function')\n    cb = opt_, files = null, opt_ = {}\n  else if (Array.isArray(opt_))\n    files = opt_, opt_ = {}\n\n  if (typeof files === 'function')\n    cb = files, files = null\n\n  if (!files)\n    files = []\n  else\n    files = Array.from(files)\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function')\n    throw new TypeError('callback not supported for sync tar functions')\n\n  if (!opt.file && typeof cb === 'function')\n    throw new TypeError('callback only supported with file option')\n\n  if (files.length)\n    filesFilter(opt, files)\n\n  if (!opt.noResume)\n    onentryFunction(opt)\n\n  return opt.file && opt.sync ? listFileSync(opt)\n    : opt.file ? listFile(opt, cb)\n    : list(opt)\n}\n\nconst onentryFunction = opt => {\n  const onentry = opt.onentry\n  opt.onentry = onentry ? e => {\n    onentry(e)\n    e.resume()\n  } : e => e.resume()\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [f.replace(/\\/+$/, ''), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\\/+$/, ''))\n    : file => mapHas(file.replace(/\\/+$/, ''))\n}\n\nconst listFileSync = opt => {\n  const p = list(opt)\n  const file = opt.file\n  let threw = true\n  let fd\n  try {\n    const stat = fs.statSync(file)\n    const readSize = opt.maxReadSize || 16*1024*1024\n    if (stat.size < readSize) {\n      p.end(fs.readFileSync(file))\n    } else {\n      let pos = 0\n      const buf = Buffer.allocUnsafe(readSize)\n      fd = fs.openSync(file, 'r')\n      while (pos < stat.size) {\n        let bytesRead = fs.readSync(fd, buf, 0, readSize, pos)\n        pos += bytesRead\n        p.write(buf.slice(0, bytesRead))\n      }\n      p.end()\n    }\n    threw = false\n  } finally {\n    if (threw && fd)\n      try { fs.closeSync(fd) } catch (er) {}\n  }\n}\n\nconst listFile = (opt, cb) => {\n  const parse = new Parser(opt)\n  const readSize = opt.maxReadSize || 16*1024*1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    parse.on('error', reject)\n    parse.on('end', resolve)\n\n    fs.stat(file, (er, stat) => {\n      if (er)\n        reject(er)\n      else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        })\n        stream.on('error', reject)\n        stream.pipe(parse)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst list = opt => new Parser(opt)\n"]},"metadata":{},"sourceType":"script"}