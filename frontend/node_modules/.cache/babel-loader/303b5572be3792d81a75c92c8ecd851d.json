{"ast":null,"code":"'use strict';\n\nconst Buffer = require('./buffer.js'); // A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\n\nclass PackJob {\n  constructor(path, absolute) {\n    this.path = path || './';\n    this.absolute = absolute;\n    this.entry = null;\n    this.stat = null;\n    this.readdir = null;\n    this.pending = false;\n    this.ignore = false;\n    this.piped = false;\n  }\n\n}\n\nconst MiniPass = require('minipass');\n\nconst zlib = require('minizlib');\n\nconst ReadEntry = require('./read-entry.js');\n\nconst WriteEntry = require('./write-entry.js');\n\nconst WriteEntrySync = WriteEntry.Sync;\nconst WriteEntryTar = WriteEntry.Tar;\n\nconst Yallist = require('yallist');\n\nconst EOF = Buffer.alloc(1024);\nconst ONSTAT = Symbol('onStat');\nconst ENDED = Symbol('ended');\nconst QUEUE = Symbol('queue');\nconst CURRENT = Symbol('current');\nconst PROCESS = Symbol('process');\nconst PROCESSING = Symbol('processing');\nconst PROCESSJOB = Symbol('processJob');\nconst JOBS = Symbol('jobs');\nconst JOBDONE = Symbol('jobDone');\nconst ADDFSENTRY = Symbol('addFSEntry');\nconst ADDTARENTRY = Symbol('addTarEntry');\nconst STAT = Symbol('stat');\nconst READDIR = Symbol('readdir');\nconst ONREADDIR = Symbol('onreaddir');\nconst PIPE = Symbol('pipe');\nconst ENTRY = Symbol('entry');\nconst ENTRYOPT = Symbol('entryOpt');\nconst WRITEENTRYCLASS = Symbol('writeEntryClass');\nconst WRITE = Symbol('write');\nconst ONDRAIN = Symbol('ondrain');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst warner = require('./warn-mixin.js');\n\nconst Pack = warner(class Pack extends MiniPass {\n  constructor(opt) {\n    super(opt);\n    opt = opt || Object.create(null);\n    this.opt = opt;\n    this.cwd = opt.cwd || process.cwd();\n    this.maxReadSize = opt.maxReadSize;\n    this.preservePaths = !!opt.preservePaths;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.prefix = (opt.prefix || '').replace(/(\\\\|\\/)+$/, '');\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.readdirCache = opt.readdirCache || new Map();\n    this[WRITEENTRYCLASS] = WriteEntry;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    this.zip = null;\n\n    if (opt.gzip) {\n      if (typeof opt.gzip !== 'object') opt.gzip = {};\n      this.zip = new zlib.Gzip(opt.gzip);\n      this.zip.on('data', chunk => super.write(chunk));\n      this.zip.on('end', _ => super.end());\n      this.zip.on('drain', _ => this[ONDRAIN]());\n      this.on('resume', _ => this.zip.resume());\n    } else this.on('drain', this[ONDRAIN]);\n\n    this.portable = !!opt.portable;\n    this.noDirRecurse = !!opt.noDirRecurse;\n    this.follow = !!opt.follow;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true;\n    this[QUEUE] = new Yallist();\n    this[JOBS] = 0;\n    this.jobs = +opt.jobs || 4;\n    this[PROCESSING] = false;\n    this[ENDED] = false;\n  }\n\n  [WRITE](chunk) {\n    return super.write(chunk);\n  }\n\n  add(path) {\n    this.write(path);\n    return this;\n  }\n\n  end(path) {\n    if (path) this.write(path);\n    this[ENDED] = true;\n    this[PROCESS]();\n    return this;\n  }\n\n  write(path) {\n    if (this[ENDED]) throw new Error('write after end');\n    if (path instanceof ReadEntry) this[ADDTARENTRY](path);else this[ADDFSENTRY](path);\n    return this.flowing;\n  }\n\n  [ADDTARENTRY](p) {\n    const absolute = path.resolve(this.cwd, p.path);\n    if (this.prefix) p.path = this.prefix + '/' + p.path.replace(/^\\.(\\/+|$)/, ''); // in this case, we don't have to wait for the stat\n\n    if (!this.filter(p.path, p)) p.resume();else {\n      const job = new PackJob(p.path, absolute, false);\n      job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));\n      job.entry.on('end', _ => this[JOBDONE](job));\n      this[JOBS] += 1;\n      this[QUEUE].push(job);\n    }\n    this[PROCESS]();\n  }\n\n  [ADDFSENTRY](p) {\n    const absolute = path.resolve(this.cwd, p);\n    if (this.prefix) p = this.prefix + '/' + p.replace(/^\\.(\\/+|$)/, '');\n    this[QUEUE].push(new PackJob(p, absolute));\n    this[PROCESS]();\n  }\n\n  [STAT](job) {\n    job.pending = true;\n    this[JOBS] += 1;\n    const stat = this.follow ? 'stat' : 'lstat';\n    fs[stat](job.absolute, (er, stat) => {\n      job.pending = false;\n      this[JOBS] -= 1;\n      if (er) this.emit('error', er);else this[ONSTAT](job, stat);\n    });\n  }\n\n  [ONSTAT](job, stat) {\n    this.statCache.set(job.absolute, stat);\n    job.stat = stat; // now we have the stat, we can filter it.\n\n    if (!this.filter(job.path, stat)) job.ignore = true;\n    this[PROCESS]();\n  }\n\n  [READDIR](job) {\n    job.pending = true;\n    this[JOBS] += 1;\n    fs.readdir(job.absolute, (er, entries) => {\n      job.pending = false;\n      this[JOBS] -= 1;\n      if (er) return this.emit('error', er);\n      this[ONREADDIR](job, entries);\n    });\n  }\n\n  [ONREADDIR](job, entries) {\n    this.readdirCache.set(job.absolute, entries);\n    job.readdir = entries;\n    this[PROCESS]();\n  }\n\n  [PROCESS]() {\n    if (this[PROCESSING]) return;\n    this[PROCESSING] = true;\n\n    for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {\n      this[PROCESSJOB](w.value);\n\n      if (w.value.ignore) {\n        const p = w.next;\n        this[QUEUE].removeNode(w);\n        w.next = p;\n      }\n    }\n\n    this[PROCESSING] = false;\n\n    if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n      if (this.zip) this.zip.end(EOF);else {\n        super.write(EOF);\n        super.end();\n      }\n    }\n  }\n\n  get [CURRENT]() {\n    return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;\n  }\n\n  [JOBDONE](job) {\n    this[QUEUE].shift();\n    this[JOBS] -= 1;\n    this[PROCESS]();\n  }\n\n  [PROCESSJOB](job) {\n    if (job.pending) return;\n\n    if (job.entry) {\n      if (job === this[CURRENT] && !job.piped) this[PIPE](job);\n      return;\n    }\n\n    if (!job.stat) {\n      if (this.statCache.has(job.absolute)) this[ONSTAT](job, this.statCache.get(job.absolute));else this[STAT](job);\n    }\n\n    if (!job.stat) return; // filtered out!\n\n    if (job.ignore) return;\n\n    if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n      if (this.readdirCache.has(job.absolute)) this[ONREADDIR](job, this.readdirCache.get(job.absolute));else this[READDIR](job);\n      if (!job.readdir) return;\n    } // we know it doesn't have an entry, because that got checked above\n\n\n    job.entry = this[ENTRY](job);\n\n    if (!job.entry) {\n      job.ignore = true;\n      return;\n    }\n\n    if (job === this[CURRENT] && !job.piped) this[PIPE](job);\n  }\n\n  [ENTRYOPT](job) {\n    return {\n      onwarn: (msg, data) => {\n        this.warn(msg, data);\n      },\n      noPax: this.noPax,\n      cwd: this.cwd,\n      absolute: job.absolute,\n      preservePaths: this.preservePaths,\n      maxReadSize: this.maxReadSize,\n      strict: this.strict,\n      portable: this.portable,\n      linkCache: this.linkCache,\n      statCache: this.statCache,\n      noMtime: this.noMtime,\n      mtime: this.mtime\n    };\n  }\n\n  [ENTRY](job) {\n    this[JOBS] += 1;\n\n    try {\n      return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on('end', () => this[JOBDONE](job)).on('error', er => this.emit('error', er));\n    } catch (er) {\n      this.emit('error', er);\n    }\n  }\n\n  [ONDRAIN]() {\n    if (this[CURRENT] && this[CURRENT].entry) this[CURRENT].entry.resume();\n  } // like .pipe() but using super, because our write() is special\n\n\n  [PIPE](job) {\n    job.piped = true;\n    if (job.readdir) job.readdir.forEach(entry => {\n      const p = this.prefix ? job.path.slice(this.prefix.length + 1) || './' : job.path;\n      const base = p === './' ? '' : p.replace(/\\/*$/, '/');\n      this[ADDFSENTRY](base + entry);\n    });\n    const source = job.entry;\n    const zip = this.zip;\n    if (zip) source.on('data', chunk => {\n      if (!zip.write(chunk)) source.pause();\n    });else source.on('data', chunk => {\n      if (!super.write(chunk)) source.pause();\n    });\n  }\n\n  pause() {\n    if (this.zip) this.zip.pause();\n    return super.pause();\n  }\n\n});\n\nclass PackSync extends Pack {\n  constructor(opt) {\n    super(opt);\n    this[WRITEENTRYCLASS] = WriteEntrySync;\n  } // pause/resume are no-ops in sync streams.\n\n\n  pause() {}\n\n  resume() {}\n\n  [STAT](job) {\n    const stat = this.follow ? 'statSync' : 'lstatSync';\n    this[ONSTAT](job, fs[stat](job.absolute));\n  }\n\n  [READDIR](job, stat) {\n    this[ONREADDIR](job, fs.readdirSync(job.absolute));\n  } // gotta get it all in this tick\n\n\n  [PIPE](job) {\n    const source = job.entry;\n    const zip = this.zip;\n    if (job.readdir) job.readdir.forEach(entry => {\n      const p = this.prefix ? job.path.slice(this.prefix.length + 1) || './' : job.path;\n      const base = p === './' ? '' : p.replace(/\\/*$/, '/');\n      this[ADDFSENTRY](base + entry);\n    });\n    if (zip) source.on('data', chunk => {\n      zip.write(chunk);\n    });else source.on('data', chunk => {\n      super[WRITE](chunk);\n    });\n  }\n\n}\n\nPack.Sync = PackSync;\nmodule.exports = Pack;","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/tar/lib/pack.js"],"names":["Buffer","require","PackJob","constructor","path","absolute","entry","stat","readdir","pending","ignore","piped","MiniPass","zlib","ReadEntry","WriteEntry","WriteEntrySync","Sync","WriteEntryTar","Tar","Yallist","EOF","alloc","ONSTAT","Symbol","ENDED","QUEUE","CURRENT","PROCESS","PROCESSING","PROCESSJOB","JOBS","JOBDONE","ADDFSENTRY","ADDTARENTRY","STAT","READDIR","ONREADDIR","PIPE","ENTRY","ENTRYOPT","WRITEENTRYCLASS","WRITE","ONDRAIN","fs","warner","Pack","opt","Object","create","cwd","process","maxReadSize","preservePaths","strict","noPax","prefix","replace","linkCache","Map","statCache","readdirCache","onwarn","on","zip","gzip","Gzip","chunk","write","_","end","resume","portable","noDirRecurse","follow","noMtime","mtime","filter","jobs","add","Error","flowing","p","resolve","job","push","er","emit","set","entries","w","head","next","value","removeNode","length","shift","has","get","isDirectory","msg","data","warn","forEach","slice","base","source","pause","PackSync","readdirSync","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Buffer = require('./buffer.js')\n\n// A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\nclass PackJob {\n  constructor (path, absolute) {\n    this.path = path || './'\n    this.absolute = absolute\n    this.entry = null\n    this.stat = null\n    this.readdir = null\n    this.pending = false\n    this.ignore = false\n    this.piped = false\n  }\n}\n\nconst MiniPass = require('minipass')\nconst zlib = require('minizlib')\nconst ReadEntry = require('./read-entry.js')\nconst WriteEntry = require('./write-entry.js')\nconst WriteEntrySync = WriteEntry.Sync\nconst WriteEntryTar = WriteEntry.Tar\nconst Yallist = require('yallist')\nconst EOF = Buffer.alloc(1024)\nconst ONSTAT = Symbol('onStat')\nconst ENDED = Symbol('ended')\nconst QUEUE = Symbol('queue')\nconst CURRENT = Symbol('current')\nconst PROCESS = Symbol('process')\nconst PROCESSING = Symbol('processing')\nconst PROCESSJOB = Symbol('processJob')\nconst JOBS = Symbol('jobs')\nconst JOBDONE = Symbol('jobDone')\nconst ADDFSENTRY = Symbol('addFSEntry')\nconst ADDTARENTRY = Symbol('addTarEntry')\nconst STAT = Symbol('stat')\nconst READDIR = Symbol('readdir')\nconst ONREADDIR = Symbol('onreaddir')\nconst PIPE = Symbol('pipe')\nconst ENTRY = Symbol('entry')\nconst ENTRYOPT = Symbol('entryOpt')\nconst WRITEENTRYCLASS = Symbol('writeEntryClass')\nconst WRITE = Symbol('write')\nconst ONDRAIN = Symbol('ondrain')\n\nconst fs = require('fs')\nconst path = require('path')\nconst warner = require('./warn-mixin.js')\n\nconst Pack = warner(class Pack extends MiniPass {\n  constructor (opt) {\n    super(opt)\n    opt = opt || Object.create(null)\n    this.opt = opt\n    this.cwd = opt.cwd || process.cwd()\n    this.maxReadSize = opt.maxReadSize\n    this.preservePaths = !!opt.preservePaths\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.prefix = (opt.prefix || '').replace(/(\\\\|\\/)+$/, '')\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.readdirCache = opt.readdirCache || new Map()\n\n    this[WRITEENTRYCLASS] = WriteEntry\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    this.zip = null\n    if (opt.gzip) {\n      if (typeof opt.gzip !== 'object')\n        opt.gzip = {}\n      this.zip = new zlib.Gzip(opt.gzip)\n      this.zip.on('data', chunk => super.write(chunk))\n      this.zip.on('end', _ => super.end())\n      this.zip.on('drain', _ => this[ONDRAIN]())\n      this.on('resume', _ => this.zip.resume())\n    } else\n      this.on('drain', this[ONDRAIN])\n\n    this.portable = !!opt.portable\n    this.noDirRecurse = !!opt.noDirRecurse\n    this.follow = !!opt.follow\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n\n    this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true\n\n    this[QUEUE] = new Yallist\n    this[JOBS] = 0\n    this.jobs = +opt.jobs || 4\n    this[PROCESSING] = false\n    this[ENDED] = false\n  }\n\n  [WRITE] (chunk) {\n    return super.write(chunk)\n  }\n\n  add (path) {\n    this.write(path)\n    return this\n  }\n\n  end (path) {\n    if (path)\n      this.write(path)\n    this[ENDED] = true\n    this[PROCESS]()\n    return this\n  }\n\n  write (path) {\n    if (this[ENDED])\n      throw new Error('write after end')\n\n    if (path instanceof ReadEntry)\n      this[ADDTARENTRY](path)\n    else\n      this[ADDFSENTRY](path)\n    return this.flowing\n  }\n\n  [ADDTARENTRY] (p) {\n    const absolute = path.resolve(this.cwd, p.path)\n    if (this.prefix)\n      p.path = this.prefix + '/' + p.path.replace(/^\\.(\\/+|$)/, '')\n\n    // in this case, we don't have to wait for the stat\n    if (!this.filter(p.path, p))\n      p.resume()\n    else {\n      const job = new PackJob(p.path, absolute, false)\n      job.entry = new WriteEntryTar(p, this[ENTRYOPT](job))\n      job.entry.on('end', _ => this[JOBDONE](job))\n      this[JOBS] += 1\n      this[QUEUE].push(job)\n    }\n\n    this[PROCESS]()\n  }\n\n  [ADDFSENTRY] (p) {\n    const absolute = path.resolve(this.cwd, p)\n    if (this.prefix)\n      p = this.prefix + '/' + p.replace(/^\\.(\\/+|$)/, '')\n\n    this[QUEUE].push(new PackJob(p, absolute))\n    this[PROCESS]()\n  }\n\n  [STAT] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    const stat = this.follow ? 'stat' : 'lstat'\n    fs[stat](job.absolute, (er, stat) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er)\n        this.emit('error', er)\n      else\n        this[ONSTAT](job, stat)\n    })\n  }\n\n  [ONSTAT] (job, stat) {\n    this.statCache.set(job.absolute, stat)\n    job.stat = stat\n\n    // now we have the stat, we can filter it.\n    if (!this.filter(job.path, stat))\n      job.ignore = true\n\n    this[PROCESS]()\n  }\n\n  [READDIR] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    fs.readdir(job.absolute, (er, entries) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er)\n        return this.emit('error', er)\n      this[ONREADDIR](job, entries)\n    })\n  }\n\n  [ONREADDIR] (job, entries) {\n    this.readdirCache.set(job.absolute, entries)\n    job.readdir = entries\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    if (this[PROCESSING])\n      return\n\n    this[PROCESSING] = true\n    for (let w = this[QUEUE].head;\n         w !== null && this[JOBS] < this.jobs;\n         w = w.next) {\n      this[PROCESSJOB](w.value)\n      if (w.value.ignore) {\n        const p = w.next\n        this[QUEUE].removeNode(w)\n        w.next = p\n      }\n    }\n\n    this[PROCESSING] = false\n\n    if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n      if (this.zip)\n        this.zip.end(EOF)\n      else {\n        super.write(EOF)\n        super.end()\n      }\n    }\n  }\n\n  get [CURRENT] () {\n    return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value\n  }\n\n  [JOBDONE] (job) {\n    this[QUEUE].shift()\n    this[JOBS] -= 1\n    this[PROCESS]()\n  }\n\n  [PROCESSJOB] (job) {\n    if (job.pending)\n      return\n\n    if (job.entry) {\n      if (job === this[CURRENT] && !job.piped)\n        this[PIPE](job)\n      return\n    }\n\n    if (!job.stat) {\n      if (this.statCache.has(job.absolute))\n        this[ONSTAT](job, this.statCache.get(job.absolute))\n      else\n        this[STAT](job)\n    }\n    if (!job.stat)\n      return\n\n    // filtered out!\n    if (job.ignore)\n      return\n\n    if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n      if (this.readdirCache.has(job.absolute))\n        this[ONREADDIR](job, this.readdirCache.get(job.absolute))\n      else\n        this[READDIR](job)\n      if (!job.readdir)\n        return\n    }\n\n    // we know it doesn't have an entry, because that got checked above\n    job.entry = this[ENTRY](job)\n    if (!job.entry) {\n      job.ignore = true\n      return\n    }\n\n    if (job === this[CURRENT] && !job.piped)\n      this[PIPE](job)\n  }\n\n  [ENTRYOPT] (job) {\n    return {\n      onwarn: (msg, data) => {\n        this.warn(msg, data)\n      },\n      noPax: this.noPax,\n      cwd: this.cwd,\n      absolute: job.absolute,\n      preservePaths: this.preservePaths,\n      maxReadSize: this.maxReadSize,\n      strict: this.strict,\n      portable: this.portable,\n      linkCache: this.linkCache,\n      statCache: this.statCache,\n      noMtime: this.noMtime,\n      mtime: this.mtime\n    }\n  }\n\n  [ENTRY] (job) {\n    this[JOBS] += 1\n    try {\n      return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job))\n        .on('end', () => this[JOBDONE](job))\n        .on('error', er => this.emit('error', er))\n    } catch (er) {\n      this.emit('error', er)\n    }\n  }\n\n  [ONDRAIN] () {\n    if (this[CURRENT] && this[CURRENT].entry)\n      this[CURRENT].entry.resume()\n  }\n\n  // like .pipe() but using super, because our write() is special\n  [PIPE] (job) {\n    job.piped = true\n\n    if (job.readdir)\n      job.readdir.forEach(entry => {\n        const p = this.prefix ?\n          job.path.slice(this.prefix.length + 1) || './'\n          : job.path\n\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n\n    const source = job.entry\n    const zip = this.zip\n\n    if (zip)\n      source.on('data', chunk => {\n        if (!zip.write(chunk))\n          source.pause()\n      })\n    else\n      source.on('data', chunk => {\n        if (!super.write(chunk))\n          source.pause()\n      })\n  }\n\n  pause () {\n    if (this.zip)\n      this.zip.pause()\n    return super.pause()\n  }\n})\n\nclass PackSync extends Pack {\n  constructor (opt) {\n    super(opt)\n    this[WRITEENTRYCLASS] = WriteEntrySync\n  }\n\n  // pause/resume are no-ops in sync streams.\n  pause () {}\n  resume () {}\n\n  [STAT] (job) {\n    const stat = this.follow ? 'statSync' : 'lstatSync'\n    this[ONSTAT](job, fs[stat](job.absolute))\n  }\n\n  [READDIR] (job, stat) {\n    this[ONREADDIR](job, fs.readdirSync(job.absolute))\n  }\n\n  // gotta get it all in this tick\n  [PIPE] (job) {\n    const source = job.entry\n    const zip = this.zip\n\n    if (job.readdir)\n      job.readdir.forEach(entry => {\n        const p = this.prefix ?\n          job.path.slice(this.prefix.length + 1) || './'\n          : job.path\n\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n\n    if (zip)\n      source.on('data', chunk => {\n        zip.write(chunk)\n      })\n    else\n      source.on('data', chunk => {\n        super[WRITE](chunk)\n      })\n  }\n}\n\nPack.Sync = PackSync\n\nmodule.exports = Pack\n"]},"metadata":{},"sourceType":"script"}