{"ast":null,"code":"// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\nconst assert = require('assert');\n\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map(); // fn => {paths:[path,...], dirs:[path, ...]}\n\n  const reservations = new Map(); // return a set of parent dirs for a given path\n\n  const {\n    join\n  } = require('path');\n\n  const getDirs = path => join(path).split(/[\\\\\\/]/).slice(0, -1).reduce((set, path) => set.length ? set.concat(join(set[set.length - 1], path)) : [path], []); // functions currently running\n\n\n  const running = new Set(); // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n\n  const getQueues = fn => {\n    const res = reservations.get(fn);\n    /* istanbul ignore if - unpossible */\n\n    if (!res) throw new Error('function does not have any path reservations');\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path))\n    };\n  }; // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n\n\n  const check = fn => {\n    const {\n      paths,\n      dirs\n    } = getQueues(fn);\n    return paths.every(q => q[0] === fn) && dirs.every(q => q[0] instanceof Set && q[0].has(fn));\n  }; // run the function if it's first in line and not already running\n\n\n  const run = fn => {\n    if (running.has(fn) || !check(fn)) return false;\n    running.add(fn);\n    fn(() => clear(fn));\n    return true;\n  };\n\n  const clear = fn => {\n    if (!running.has(fn)) return false;\n    const {\n      paths,\n      dirs\n    } = reservations.get(fn);\n    const next = new Set();\n    paths.forEach(path => {\n      const q = queues.get(path);\n      assert.equal(q[0], fn);\n      if (q.length === 1) queues.delete(path);else {\n        q.shift();\n        if (typeof q[0] === 'function') next.add(q[0]);else q[0].forEach(fn => next.add(fn));\n      }\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      assert(q[0] instanceof Set);\n\n      if (q[0].size === 1 && q.length === 1) {\n        queues.delete(dir);\n      } else if (q[0].size === 1) {\n        q.shift(); // must be a function or else the Set would've been reused\n\n        next.add(q[0]);\n      } else q[0].delete(fn);\n    });\n    running.delete(fn);\n    next.forEach(fn => run(fn));\n    return true;\n  };\n\n  const reserve = (paths, fn) => {\n    const dirs = new Set(paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b)));\n    reservations.set(fn, {\n      dirs,\n      paths\n    });\n    paths.forEach(path => {\n      const q = queues.get(path);\n      if (!q) queues.set(path, [fn]);else q.push(fn);\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      if (!q) queues.set(dir, [new Set([fn])]);else if (q[q.length - 1] instanceof Set) q[q.length - 1].add(fn);else q.push(new Set([fn]));\n    });\n    return run(fn);\n  };\n\n  return {\n    check,\n    reserve\n  };\n};","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/node_modules/tar/lib/path-reservations.js"],"names":["assert","require","module","exports","queues","Map","reservations","join","getDirs","path","split","slice","reduce","set","length","concat","running","Set","getQueues","fn","res","get","Error","paths","map","dirs","check","every","q","has","run","add","clear","next","forEach","equal","delete","shift","dir","size","reserve","a","b","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAM;AACrB;AACA;AACA;AACA,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf,CAJqB,CAMrB;;AACA,QAAMC,YAAY,GAAG,IAAID,GAAJ,EAArB,CAPqB,CASrB;;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAWN,OAAO,CAAC,MAAD,CAAxB;;AACA,QAAMO,OAAO,GAAGC,IAAI,IAClBF,IAAI,CAACE,IAAD,CAAJ,CAAWC,KAAX,CAAiB,QAAjB,EAA2BC,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,EAAwCC,MAAxC,CAA+C,CAACC,GAAD,EAAMJ,IAAN,KAC7CI,GAAG,CAACC,MAAJ,GAAaD,GAAG,CAACE,MAAJ,CAAWR,IAAI,CAACM,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAW,CAAZ,CAAJ,EAAoBL,IAApB,CAAf,CAAb,GAAyD,CAACA,IAAD,CAD3D,EACmE,EADnE,CADF,CAXqB,CAerB;;;AACA,QAAMO,OAAO,GAAG,IAAIC,GAAJ,EAAhB,CAhBqB,CAkBrB;AACA;;AACA,QAAMC,SAAS,GAAGC,EAAE,IAAI;AACtB,UAAMC,GAAG,GAAGd,YAAY,CAACe,GAAb,CAAiBF,EAAjB,CAAZ;AACA;;AACA,QAAI,CAACC,GAAL,EACE,MAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACF,WAAO;AACLC,MAAAA,KAAK,EAAEH,GAAG,CAACG,KAAJ,CAAUC,GAAV,CAAcf,IAAI,IAAIL,MAAM,CAACiB,GAAP,CAAWZ,IAAX,CAAtB,CADF;AAELgB,MAAAA,IAAI,EAAE,CAAC,GAAGL,GAAG,CAACK,IAAR,EAAcD,GAAd,CAAkBf,IAAI,IAAIL,MAAM,CAACiB,GAAP,CAAWZ,IAAX,CAA1B;AAFD,KAAP;AAID,GATD,CApBqB,CA+BrB;AACA;;;AACA,QAAMiB,KAAK,GAAGP,EAAE,IAAI;AAClB,UAAM;AAACI,MAAAA,KAAD;AAAQE,MAAAA;AAAR,QAAgBP,SAAS,CAACC,EAAD,CAA/B;AACA,WAAOI,KAAK,CAACI,KAAN,CAAYC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAST,EAA1B,KACLM,IAAI,CAACE,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,YAAgBX,GAAhB,IAAuBW,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAL,CAASV,EAAT,CAAvC,CADF;AAED,GAJD,CAjCqB,CAuCrB;;;AACA,QAAMW,GAAG,GAAGX,EAAE,IAAI;AAChB,QAAIH,OAAO,CAACa,GAAR,CAAYV,EAAZ,KAAmB,CAACO,KAAK,CAACP,EAAD,CAA7B,EACE,OAAO,KAAP;AACFH,IAAAA,OAAO,CAACe,GAAR,CAAYZ,EAAZ;AACAA,IAAAA,EAAE,CAAC,MAAMa,KAAK,CAACb,EAAD,CAAZ,CAAF;AACA,WAAO,IAAP;AACD,GAND;;AAQA,QAAMa,KAAK,GAAGb,EAAE,IAAI;AAClB,QAAI,CAACH,OAAO,CAACa,GAAR,CAAYV,EAAZ,CAAL,EACE,OAAO,KAAP;AAEF,UAAM;AAAEI,MAAAA,KAAF;AAASE,MAAAA;AAAT,QAAkBnB,YAAY,CAACe,GAAb,CAAiBF,EAAjB,CAAxB;AACA,UAAMc,IAAI,GAAG,IAAIhB,GAAJ,EAAb;AAEAM,IAAAA,KAAK,CAACW,OAAN,CAAczB,IAAI,IAAI;AACpB,YAAMmB,CAAC,GAAGxB,MAAM,CAACiB,GAAP,CAAWZ,IAAX,CAAV;AACAT,MAAAA,MAAM,CAACmC,KAAP,CAAaP,CAAC,CAAC,CAAD,CAAd,EAAmBT,EAAnB;AACA,UAAIS,CAAC,CAACd,MAAF,KAAa,CAAjB,EACEV,MAAM,CAACgC,MAAP,CAAc3B,IAAd,EADF,KAEK;AACHmB,QAAAA,CAAC,CAACS,KAAF;AACA,YAAI,OAAOT,CAAC,CAAC,CAAD,CAAR,KAAgB,UAApB,EACEK,IAAI,CAACF,GAAL,CAASH,CAAC,CAAC,CAAD,CAAV,EADF,KAGEA,CAAC,CAAC,CAAD,CAAD,CAAKM,OAAL,CAAaf,EAAE,IAAIc,IAAI,CAACF,GAAL,CAASZ,EAAT,CAAnB;AACH;AACF,KAZD;AAcAM,IAAAA,IAAI,CAACS,OAAL,CAAaI,GAAG,IAAI;AAClB,YAAMV,CAAC,GAAGxB,MAAM,CAACiB,GAAP,CAAWiB,GAAX,CAAV;AACAtC,MAAAA,MAAM,CAAC4B,CAAC,CAAC,CAAD,CAAD,YAAgBX,GAAjB,CAAN;;AACA,UAAIW,CAAC,CAAC,CAAD,CAAD,CAAKW,IAAL,KAAc,CAAd,IAAmBX,CAAC,CAACd,MAAF,KAAa,CAApC,EAAuC;AACrCV,QAAAA,MAAM,CAACgC,MAAP,CAAcE,GAAd;AACD,OAFD,MAEO,IAAIV,CAAC,CAAC,CAAD,CAAD,CAAKW,IAAL,KAAc,CAAlB,EAAqB;AAC1BX,QAAAA,CAAC,CAACS,KAAF,GAD0B,CAG1B;;AACAJ,QAAAA,IAAI,CAACF,GAAL,CAASH,CAAC,CAAC,CAAD,CAAV;AACD,OALM,MAMLA,CAAC,CAAC,CAAD,CAAD,CAAKQ,MAAL,CAAYjB,EAAZ;AACH,KAZD;AAaAH,IAAAA,OAAO,CAACoB,MAAR,CAAejB,EAAf;AAEAc,IAAAA,IAAI,CAACC,OAAL,CAAaf,EAAE,IAAIW,GAAG,CAACX,EAAD,CAAtB;AACA,WAAO,IAAP;AACD,GAtCD;;AAwCA,QAAMqB,OAAO,GAAG,CAACjB,KAAD,EAAQJ,EAAR,KAAe;AAC7B,UAAMM,IAAI,GAAG,IAAIR,GAAJ,CACXM,KAAK,CAACC,GAAN,CAAUf,IAAI,IAAID,OAAO,CAACC,IAAD,CAAzB,EAAiCG,MAAjC,CAAwC,CAAC6B,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC1B,MAAF,CAAS2B,CAAT,CAAlD,CADW,CAAb;AAGApC,IAAAA,YAAY,CAACO,GAAb,CAAiBM,EAAjB,EAAqB;AAACM,MAAAA,IAAD;AAAOF,MAAAA;AAAP,KAArB;AACAA,IAAAA,KAAK,CAACW,OAAN,CAAczB,IAAI,IAAI;AACpB,YAAMmB,CAAC,GAAGxB,MAAM,CAACiB,GAAP,CAAWZ,IAAX,CAAV;AACA,UAAI,CAACmB,CAAL,EACExB,MAAM,CAACS,GAAP,CAAWJ,IAAX,EAAiB,CAACU,EAAD,CAAjB,EADF,KAGES,CAAC,CAACe,IAAF,CAAOxB,EAAP;AACH,KAND;AAOAM,IAAAA,IAAI,CAACS,OAAL,CAAaI,GAAG,IAAI;AAClB,YAAMV,CAAC,GAAGxB,MAAM,CAACiB,GAAP,CAAWiB,GAAX,CAAV;AACA,UAAI,CAACV,CAAL,EACExB,MAAM,CAACS,GAAP,CAAWyB,GAAX,EAAgB,CAAC,IAAIrB,GAAJ,CAAQ,CAACE,EAAD,CAAR,CAAD,CAAhB,EADF,KAEK,IAAIS,CAAC,CAACA,CAAC,CAACd,MAAF,GAAS,CAAV,CAAD,YAAyBG,GAA7B,EACHW,CAAC,CAACA,CAAC,CAACd,MAAF,GAAS,CAAV,CAAD,CAAciB,GAAd,CAAkBZ,EAAlB,EADG,KAGHS,CAAC,CAACe,IAAF,CAAO,IAAI1B,GAAJ,CAAQ,CAACE,EAAD,CAAR,CAAP;AACH,KARD;AAUA,WAAOW,GAAG,CAACX,EAAD,CAAV;AACD,GAvBD;;AAyBA,SAAO;AAAEO,IAAAA,KAAF;AAASc,IAAAA;AAAT,GAAP;AACD,CAlHD","sourcesContent":["// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\n\nconst assert = require('assert')\n\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map()\n\n  // fn => {paths:[path,...], dirs:[path, ...]}\n  const reservations = new Map()\n\n  // return a set of parent dirs for a given path\n  const { join } = require('path')\n  const getDirs = path =>\n    join(path).split(/[\\\\\\/]/).slice(0, -1).reduce((set, path) =>\n      set.length ? set.concat(join(set[set.length-1], path)) : [path], [])\n\n  // functions currently running\n  const running = new Set()\n\n  // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n  const getQueues = fn => {\n    const res = reservations.get(fn)\n    /* istanbul ignore if - unpossible */\n    if (!res)\n      throw new Error('function does not have any path reservations')\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path)),\n    }\n  }\n\n  // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n  const check = fn => {\n    const {paths, dirs} = getQueues(fn)\n    return paths.every(q => q[0] === fn) &&\n      dirs.every(q => q[0] instanceof Set && q[0].has(fn))\n  }\n\n  // run the function if it's first in line and not already running\n  const run = fn => {\n    if (running.has(fn) || !check(fn))\n      return false\n    running.add(fn)\n    fn(() => clear(fn))\n    return true\n  }\n\n  const clear = fn => {\n    if (!running.has(fn))\n      return false\n\n    const { paths, dirs } = reservations.get(fn)\n    const next = new Set()\n\n    paths.forEach(path => {\n      const q = queues.get(path)\n      assert.equal(q[0], fn)\n      if (q.length === 1)\n        queues.delete(path)\n      else {\n        q.shift()\n        if (typeof q[0] === 'function')\n          next.add(q[0])\n        else\n          q[0].forEach(fn => next.add(fn))\n      }\n    })\n\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      assert(q[0] instanceof Set)\n      if (q[0].size === 1 && q.length === 1) {\n        queues.delete(dir)\n      } else if (q[0].size === 1) {\n        q.shift()\n\n        // must be a function or else the Set would've been reused\n        next.add(q[0])\n      } else\n        q[0].delete(fn)\n    })\n    running.delete(fn)\n\n    next.forEach(fn => run(fn))\n    return true\n  }\n\n  const reserve = (paths, fn) => {\n    const dirs = new Set(\n      paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))\n    )\n    reservations.set(fn, {dirs, paths})\n    paths.forEach(path => {\n      const q = queues.get(path)\n      if (!q)\n        queues.set(path, [fn])\n      else\n        q.push(fn)\n    })\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      if (!q)\n        queues.set(dir, [new Set([fn])])\n      else if (q[q.length-1] instanceof Set)\n        q[q.length-1].add(fn)\n      else\n        q.push(new Set([fn]))\n    })\n\n    return run(fn)\n  }\n\n  return { check, reserve }\n}\n"]},"metadata":{},"sourceType":"script"}