{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = testpackage;\nexports.usage = 'Tests that the staged package is valid';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar testbinary = require('./testbinary.js');\n\nvar tar = require('tar');\n\nvar mkdirp = require('mkdirp');\n\nfunction testpackage(gyp, argv, callback) {\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var tarball = opts.staged_tarball;\n  existsAsync(tarball, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot test package because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n    }\n\n    var to = opts.module_path;\n\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n\n    mkdirp(to, function (err) {\n      if (err) {\n        return callback(err);\n      } else {\n        tar.extract({\n          file: tarball,\n          cwd: to,\n          strip: 1,\n          onentry: filter_func\n        }).then(after_extract, callback);\n      }\n    });\n\n    function after_extract() {\n      testbinary(gyp, argv, function (err) {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/testpackage.js"],"names":["module","exports","testpackage","usage","fs","require","path","log","existsAsync","exists","versioning","napi","testbinary","tar","mkdirp","gyp","argv","callback","package_json","JSON","parse","readFileSync","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","tarball","staged_tarball","found","Error","to","module_path","filter_func","entry","info","err","extract","file","cwd","strip","onentry","then","after_extract","console","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,WAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,wCAAhB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIG,WAAW,GAAGJ,EAAE,CAACK,MAAH,IAAaH,IAAI,CAACG,MAApC;;AACA,IAAIC,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAAlB;;AACA,IAAIO,UAAU,GAAGP,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIQ,GAAG,GAAGR,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIS,MAAM,GAAGT,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASH,WAAT,CAAqBa,GAArB,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;AACtC,MAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWhB,EAAE,CAACiB,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,MAAIC,kBAAkB,GAAGX,IAAI,CAACY,wCAAL,CAA8CP,IAA9C,CAAzB;AACA,MAAIQ,IAAI,GAAGd,UAAU,CAACe,QAAX,CAAoBP,YAApB,EAAkCH,GAAG,CAACS,IAAtC,EAA4CF,kBAA5C,CAAX;AACA,MAAII,OAAO,GAAGF,IAAI,CAACG,cAAnB;AACAnB,EAAAA,WAAW,CAACkB,OAAD,EAAU,UAASE,KAAT,EAAgB;AACjC,QAAI,CAACA,KAAL,EAAY;AACR,aAAOX,QAAQ,CAAC,IAAIY,KAAJ,CAAU,iCAAiCH,OAAjC,GAA2C,4CAArD,CAAD,CAAf;AACH;;AACD,QAAII,EAAE,GAAGN,IAAI,CAACO,WAAd;;AACA,aAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB1B,MAAAA,GAAG,CAAC2B,IAAJ,CAAS,SAAT,EAAmB,gBAAgBD,KAAK,CAAC3B,IAAtB,GAA6B,GAAhD;AACH;;AAEDQ,IAAAA,MAAM,CAACgB,EAAD,EAAK,UAASK,GAAT,EAAc;AACrB,UAAIA,GAAJ,EAAS;AACL,eAAOlB,QAAQ,CAACkB,GAAD,CAAf;AACH,OAFD,MAEO;AACHtB,QAAAA,GAAG,CAACuB,OAAJ,CAAY;AACRC,UAAAA,IAAI,EAAEX,OADE;AAERY,UAAAA,GAAG,EAAER,EAFG;AAGRS,UAAAA,KAAK,EAAE,CAHC;AAIRC,UAAAA,OAAO,EAAER;AAJD,SAAZ,EAKGS,IALH,CAKQC,aALR,EAKuBzB,QALvB;AAMH;AACJ,KAXK,CAAN;;AAaA,aAASyB,aAAT,GAAyB;AACrB9B,MAAAA,UAAU,CAACG,GAAD,EAAKC,IAAL,EAAU,UAASmB,GAAT,EAAc;AAC9B,YAAIA,GAAJ,EAAS;AACL,iBAAOlB,QAAQ,CAACkB,GAAD,CAAf;AACH,SAFD,MAEO;AACHQ,UAAAA,OAAO,CAACpC,GAAR,CAAY,MAAIW,YAAY,CAAC0B,IAAjB,GAAsB,yBAAlC;AACA,iBAAO3B,QAAQ,EAAf;AACH;AACJ,OAPS,CAAV;AAQH;AACJ,GAhCU,CAAX;AAiCH","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = testpackage;\n\nexports.usage = 'Tests that the staged package is valid';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar existsAsync = fs.exists || path.exists;\nvar versioning = require('./util/versioning.js');\nvar napi = require('./util/napi.js');\nvar testbinary = require('./testbinary.js');\nvar tar = require('tar');\nvar mkdirp = require('mkdirp');\n\nfunction testpackage(gyp, argv, callback) {\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n    var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n    var tarball = opts.staged_tarball;\n    existsAsync(tarball, function(found) {\n        if (!found) {\n            return callback(new Error(\"Cannot test package because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n        }\n        var to = opts.module_path;\n        function filter_func(entry) {\n            log.info('install','unpacking [' + entry.path + ']');\n        }\n\n        mkdirp(to, function(err) {\n            if (err) {\n                return callback(err);\n            } else {\n                tar.extract({\n                    file: tarball,\n                    cwd: to,\n                    strip: 1,\n                    onentry: filter_func\n                }).then(after_extract, callback);\n            }\n        });\n\n        function after_extract() {\n            testbinary(gyp,argv,function(err) {\n                if (err) {\n                    return callback(err);\n                } else {\n                    console.log('['+package_json.name+'] Package appears valid');\n                    return callback();\n                }\n            });\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"script"}