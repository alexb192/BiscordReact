{"ast":null,"code":"'use strict'; // this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js');\n\nconst path = require('path');\n\nconst Header = require('./header.js');\n\nconst EE = require('events');\n\nconst Yallist = require('yallist');\n\nconst maxMetaEntrySize = 1024 * 1024;\n\nconst Entry = require('./read-entry.js');\n\nconst Pax = require('./pax.js');\n\nconst zlib = require('minizlib');\n\nconst Buffer = require('./buffer.js');\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b]);\nconst STATE = Symbol('state');\nconst WRITEENTRY = Symbol('writeEntry');\nconst READENTRY = Symbol('readEntry');\nconst NEXTENTRY = Symbol('nextEntry');\nconst PROCESSENTRY = Symbol('processEntry');\nconst EX = Symbol('extendedHeader');\nconst GEX = Symbol('globalExtendedHeader');\nconst META = Symbol('meta');\nconst EMITMETA = Symbol('emitMeta');\nconst BUFFER = Symbol('buffer');\nconst QUEUE = Symbol('queue');\nconst ENDED = Symbol('ended');\nconst EMITTEDEND = Symbol('emittedEnd');\nconst EMIT = Symbol('emit');\nconst UNZIP = Symbol('unzip');\nconst CONSUMECHUNK = Symbol('consumeChunk');\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub');\nconst CONSUMEBODY = Symbol('consumeBody');\nconst CONSUMEMETA = Symbol('consumeMeta');\nconst CONSUMEHEADER = Symbol('consumeHeader');\nconst CONSUMING = Symbol('consuming');\nconst BUFFERCONCAT = Symbol('bufferConcat');\nconst MAYBEEND = Symbol('maybeEnd');\nconst WRITING = Symbol('writing');\nconst ABORTED = Symbol('aborted');\nconst DONE = Symbol('onDone');\n\nconst noop = _ => true;\n\nmodule.exports = warner(class Parser extends EE {\n  constructor(opt) {\n    opt = opt || {};\n    super(opt);\n    if (opt.ondone) this.on(DONE, opt.ondone);else this.on(DONE, _ => {\n      this.emit('prefinish');\n      this.emit('finish');\n      this.emit('end');\n      this.emit('close');\n    });\n    this.strict = !!opt.strict;\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop; // have to set this so that streams are ok piping into it\n\n    this.writable = true;\n    this.readable = false;\n    this[QUEUE] = new Yallist();\n    this[BUFFER] = null;\n    this[READENTRY] = null;\n    this[WRITEENTRY] = null;\n    this[STATE] = 'begin';\n    this[META] = '';\n    this[EX] = null;\n    this[GEX] = null;\n    this[ENDED] = false;\n    this[UNZIP] = null;\n    this[ABORTED] = false;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    if (typeof opt.onentry === 'function') this.on('entry', opt.onentry);\n  }\n\n  [CONSUMEHEADER](chunk, position) {\n    let header;\n\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX]);\n    } catch (er) {\n      return this.warn('invalid entry', er);\n    }\n\n    if (header.nullBlock) this[EMIT]('nullBlock');else if (!header.cksumValid) this.warn('invalid entry', header);else if (!header.path) this.warn('invalid: path is required', header);else {\n      const type = header.type;\n      if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) this.warn('invalid: linkpath required', header);else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) this.warn('invalid: linkpath forbidden', header);else {\n        const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);\n\n        if (entry.meta) {\n          if (entry.size > this.maxMetaEntrySize) {\n            entry.ignore = true;\n            this[EMIT]('ignoredEntry', entry);\n            this[STATE] = 'ignore';\n          } else if (entry.size > 0) {\n            this[META] = '';\n            entry.on('data', c => this[META] += c);\n            this[STATE] = 'meta';\n          }\n        } else {\n          this[EX] = null;\n          entry.ignore = entry.ignore || !this.filter(entry.path, entry);\n\n          if (entry.ignore) {\n            this[EMIT]('ignoredEntry', entry);\n            this[STATE] = entry.remain ? 'ignore' : 'begin';\n          } else {\n            if (entry.remain) this[STATE] = 'body';else {\n              this[STATE] = 'begin';\n              entry.end();\n            }\n\n            if (!this[READENTRY]) {\n              this[QUEUE].push(entry);\n              this[NEXTENTRY]();\n            } else this[QUEUE].push(entry);\n          }\n        }\n      }\n    }\n  }\n\n  [PROCESSENTRY](entry) {\n    let go = true;\n\n    if (!entry) {\n      this[READENTRY] = null;\n      go = false;\n    } else if (Array.isArray(entry)) this.emit.apply(this, entry);else {\n      this[READENTRY] = entry;\n      this.emit('entry', entry);\n\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]());\n        go = false;\n      }\n    }\n\n    return go;\n  }\n\n  [NEXTENTRY]() {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()));\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY];\n      const drainNow = !re || re.flowing || re.size === re.remain;\n\n      if (drainNow) {\n        if (!this[WRITING]) this.emit('drain');\n      } else re.once('drain', _ => this.emit('drain'));\n    }\n  }\n\n  [CONSUMEBODY](chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY];\n    const br = entry.blockRemain;\n    const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);\n    entry.write(c);\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'begin';\n      this[WRITEENTRY] = null;\n      entry.end();\n    }\n\n    return c.length;\n  }\n\n  [CONSUMEMETA](chunk, position) {\n    const entry = this[WRITEENTRY];\n    const ret = this[CONSUMEBODY](chunk, position); // if we finished, then the entry is reset\n\n    if (!this[WRITEENTRY]) this[EMITMETA](entry);\n    return ret;\n  }\n\n  [EMIT](ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) this.emit(ev, data, extra);else this[QUEUE].push([ev, data, extra]);\n  }\n\n  [EMITMETA](entry) {\n    this[EMIT]('meta', this[META]);\n\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false);\n        break;\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true);\n        break;\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].path = this[META].replace(/\\0.*/, '');\n        break;\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null);\n        this[EX].linkpath = this[META].replace(/\\0.*/, '');\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error('unknown meta: ' + entry.type);\n    }\n  }\n\n  abort(msg, error) {\n    this[ABORTED] = true;\n    this.warn(msg, error);\n    this.emit('abort', error);\n    this.emit('error', error);\n  }\n\n  write(chunk) {\n    if (this[ABORTED]) return; // first write, might be gzipped\n\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk]);\n        this[BUFFER] = null;\n      }\n\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk;\n        return true;\n      }\n\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) this[UNZIP] = false;\n      }\n\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED];\n        this[ENDED] = false;\n        this[UNZIP] = new zlib.Unzip();\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk));\n        this[UNZIP].on('error', er => this.abort(er.message, er));\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true;\n          this[CONSUMECHUNK]();\n        });\n        this[WRITING] = true;\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk);\n        this[WRITING] = false;\n        return ret;\n      }\n    }\n\n    this[WRITING] = true;\n    if (this[UNZIP]) this[UNZIP].write(chunk);else this[CONSUMECHUNK](chunk);\n    this[WRITING] = false; // return false if there's a queue, or if the current entry isn't flowing\n\n    const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true; // if we have no queue, then that means a clogged READENTRY\n\n    if (!ret && !this[QUEUE].length) this[READENTRY].once('drain', _ => this.emit('drain'));\n    return ret;\n  }\n\n  [BUFFERCONCAT](c) {\n    if (c && !this[ABORTED]) this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;\n  }\n\n  [MAYBEEND]() {\n    if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {\n      this[EMITTEDEND] = true;\n      const entry = this[WRITEENTRY];\n\n      if (entry && entry.blockRemain) {\n        const have = this[BUFFER] ? this[BUFFER].length : 0;\n        this.warn('Truncated input (needed ' + entry.blockRemain + ' more bytes, only ' + have + ' available)', entry);\n        if (this[BUFFER]) entry.write(this[BUFFER]);\n        entry.end();\n      }\n\n      this[EMIT](DONE);\n    }\n  }\n\n  [CONSUMECHUNK](chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk);\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]();\n    } else {\n      this[CONSUMING] = true;\n\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk);\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      } else {\n        this[CONSUMECHUNKSUB](chunk);\n      }\n\n      while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED]) {\n        const c = this[BUFFER];\n        this[BUFFER] = null;\n        this[CONSUMECHUNKSUB](c);\n      }\n\n      this[CONSUMING] = false;\n    }\n\n    if (!this[BUFFER] || this[ENDED]) this[MAYBEEND]();\n  }\n\n  [CONSUMECHUNKSUB](chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0;\n    let length = chunk.length;\n\n    while (position + 512 <= length && !this[ABORTED]) {\n      switch (this[STATE]) {\n        case 'begin':\n          this[CONSUMEHEADER](chunk, position);\n          position += 512;\n          break;\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position);\n          break;\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position);\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error('invalid state: ' + this[STATE]);\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);else this[BUFFER] = chunk.slice(position);\n    }\n  }\n\n  end(chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) this[UNZIP].end(chunk);else {\n        this[ENDED] = true;\n        this.write(chunk);\n      }\n    }\n  }\n\n});","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/tar/lib/parse.js"],"names":["warner","require","path","Header","EE","Yallist","maxMetaEntrySize","Entry","Pax","zlib","Buffer","gzipHeader","from","STATE","Symbol","WRITEENTRY","READENTRY","NEXTENTRY","PROCESSENTRY","EX","GEX","META","EMITMETA","BUFFER","QUEUE","ENDED","EMITTEDEND","EMIT","UNZIP","CONSUMECHUNK","CONSUMECHUNKSUB","CONSUMEBODY","CONSUMEMETA","CONSUMEHEADER","CONSUMING","BUFFERCONCAT","MAYBEEND","WRITING","ABORTED","DONE","noop","_","module","exports","Parser","constructor","opt","ondone","on","emit","strict","filter","writable","readable","onwarn","onentry","chunk","position","header","er","warn","nullBlock","cksumValid","type","test","linkpath","entry","meta","size","ignore","c","remain","end","push","go","Array","isArray","apply","emittedEnd","shift","length","re","drainNow","flowing","once","br","blockRemain","slice","write","ret","ev","data","extra","parse","Object","create","replace","Error","abort","msg","error","concat","i","ended","Unzip","message","have"],"mappings":"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","sourcesContent":["'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst path = require('path')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\nconst Buffer = require('./buffer.js')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    if (opt.ondone)\n      this.on(DONE, opt.ondone)\n    else\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n        this.emit('close')\n      })\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n    if (typeof opt.onentry === 'function')\n      this.on('entry', opt.onentry)\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('invalid entry', er)\n    }\n\n    if (header.nullBlock)\n      this[EMIT]('nullBlock')\n    else if (!header.cksumValid)\n      this.warn('invalid entry', header)\n    else if (!header.path)\n      this.warn('invalid: path is required', header)\n    else {\n      const type = header.type\n      if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)\n        this.warn('invalid: linkpath required', header)\n      else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)\n        this.warn('invalid: linkpath forbidden', header)\n      else {\n        const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n        if (entry.meta) {\n          if (entry.size > this.maxMetaEntrySize) {\n            entry.ignore = true\n            this[EMIT]('ignoredEntry', entry)\n            this[STATE] = 'ignore'\n          } else if (entry.size > 0) {\n            this[META] = ''\n            entry.on('data', c => this[META] += c)\n            this[STATE] = 'meta'\n          }\n        } else {\n\n          this[EX] = null\n          entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n          if (entry.ignore) {\n            this[EMIT]('ignoredEntry', entry)\n            this[STATE] = entry.remain ? 'ignore' : 'begin'\n          } else {\n            if (entry.remain)\n              this[STATE] = 'body'\n            else {\n              this[STATE] = 'begin'\n              entry.end()\n            }\n\n            if (!this[READENTRY]) {\n              this[QUEUE].push(entry)\n              this[NEXTENTRY]()\n            } else\n              this[QUEUE].push(entry)\n          }\n        }\n      }\n    }\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry))\n      this.emit.apply(this, entry)\n    else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING])\n          this.emit('drain')\n      } else\n        re.once('drain', _ => this.emit('drain'))\n     }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'begin'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY])\n      this[EMITMETA](entry)\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY])\n      this.emit(ev, data, extra)\n    else\n      this[QUEUE].push([ev, data, extra])\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (msg, error) {\n    this[ABORTED] = true\n    this.warn(msg, error)\n    this.emit('abort', error)\n    this.emit('error', error)\n  }\n\n  write (chunk) {\n    if (this[ABORTED])\n      return\n\n    // first write, might be gzipped\n    if (this[UNZIP] === null && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i])\n          this[UNZIP] = false\n      }\n      if (this[UNZIP] === null) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = new zlib.Unzip()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er =>\n          this.abort(er.message, er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write' ](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP])\n      this[UNZIP].write(chunk)\n    else\n      this[CONSUMECHUNK](chunk)\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length)\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED])\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('Truncated input (needed ' + entry.blockRemain +\n                  ' more bytes, only ' + have + ' available)', entry)\n        if (this[BUFFER])\n          entry.write(this[BUFFER])\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk)\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]()\n    } else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else {\n        this[CONSUMECHUNKSUB](chunk)\n      }\n\n      while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED])\n      this[MAYBEEND]()\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    let length = chunk.length\n    while (position + 512 <= length && !this[ABORTED]) {\n      switch (this[STATE]) {\n        case 'begin':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER])\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      else\n        this[BUFFER] = chunk.slice(position)\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP])\n        this[UNZIP].end(chunk)\n      else {\n        this[ENDED] = true\n        this.write(chunk)\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}