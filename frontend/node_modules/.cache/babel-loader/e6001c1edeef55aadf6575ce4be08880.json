{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = testbinary;\nexports.usage = 'Tests that the binary.node can be required';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar cp = require('child_process');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar path = require('path');\n\nfunction testbinary(gyp, argv, callback) {\n  var args = [];\n  var options = {};\n  var shell_cmd = process.execPath;\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version); // skip validation for runtimes we don't explicitly support (like electron)\n\n  if (opts.runtime && opts.runtime !== 'node-webkit' && opts.runtime !== 'node') {\n    return callback();\n  }\n\n  var nw = opts.runtime && opts.runtime === 'node-webkit'; // ensure on windows that / are used for require path\n\n  var binary_module = opts.module.replace(/\\\\/g, '/');\n\n  if (process.arch != opts.target_arch || process.platform != opts.target_platform) {\n    var msg = \"skipping validation since host platform/arch (\";\n    msg += process.platform + '/' + process.arch + \")\";\n    msg += \" does not match target (\";\n    msg += opts.target_platform + '/' + opts.target_arch + \")\";\n    log.info('validate', msg);\n    return callback();\n  }\n\n  if (nw) {\n    options.timeout = 5000;\n\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n\n    var modulePath = path.resolve(binary_module);\n    var appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info(\"validate\", \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n\n        var stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n\n        return callback(err);\n      }\n\n      return callback();\n    });\n    return;\n  }\n\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info(\"validate\", \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {\n    if (err) {\n      return callback(err, {\n        stdout: stdout,\n        stderr: stderr\n      });\n    }\n\n    return callback();\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/testbinary.js"],"names":["module","exports","testbinary","usage","fs","require","path","log","cp","versioning","napi","gyp","argv","callback","args","options","shell_cmd","process","execPath","package_json","JSON","parse","readFileSync","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","runtime","nw","binary_module","replace","arch","target_arch","platform","target_platform","msg","info","timeout","modulePath","resolve","appDir","join","__dirname","push","execFile","err","stdout","stderr","killed","signal","indexOf","stderrLog","toString","test"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = testbinary;\n\nexports.usage = 'Tests that the binary.node can be required';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar cp = require('child_process');\nvar versioning = require('./util/versioning.js');\nvar napi = require('./util/napi.js');\nvar path = require('path');\n\nfunction testbinary(gyp, argv, callback) {\n    var args = [];\n    var options = {};\n    var shell_cmd = process.execPath;\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n    var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n    // skip validation for runtimes we don't explicitly support (like electron)\n    if (opts.runtime &&\n        opts.runtime !== 'node-webkit' &&\n        opts.runtime !== 'node') {\n        return callback();\n    }\n    var nw = (opts.runtime && opts.runtime === 'node-webkit');\n    // ensure on windows that / are used for require path\n    var binary_module = opts.module.replace(/\\\\/g, '/');\n    if ((process.arch != opts.target_arch) ||\n        (process.platform != opts.target_platform)) {\n        var msg = \"skipping validation since host platform/arch (\";\n        msg += process.platform+'/'+process.arch+\")\";\n        msg += \" does not match target (\";\n        msg += opts.target_platform+'/'+opts.target_arch+\")\";\n        log.info('validate', msg);\n        return callback();\n    }\n    if (nw) {\n        options.timeout = 5000;\n        if (process.platform === 'darwin') {\n            shell_cmd = 'node-webkit';\n        } else if (process.platform === 'win32') {\n            shell_cmd = 'nw.exe';\n        } else {\n            shell_cmd = 'nw';\n        }\n        var modulePath = path.resolve(binary_module);\n        var appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n        args.push(appDir);\n        args.push(modulePath);\n        log.info(\"validate\",\"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n        cp.execFile(shell_cmd, args, options, function(err, stdout, stderr) {\n            // check for normal timeout for node-webkit\n            if (err) {\n                if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n                    return callback();\n                }\n                var stderrLog = stderr.toString();\n                log.info('stderr', stderrLog);\n                if( /^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog) ){\n                    log.info('RANDR', 'stderr contains only RANDR error, ignored');\n                    return callback();\n                }\n                return callback(err);\n            }\n            return callback();\n        });\n        return;\n    }\n    args.push('--eval');\n    args.push(\"require('\" + binary_module.replace(/'/g, '\\'') +\"')\");\n    log.info(\"validate\",\"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, function(err, stdout, stderr) {\n        if (err) {\n            return callback(err, { stdout:stdout, stderr:stderr});\n        }\n        return callback();\n    });\n}\n"]},"metadata":{},"sourceType":"script"}