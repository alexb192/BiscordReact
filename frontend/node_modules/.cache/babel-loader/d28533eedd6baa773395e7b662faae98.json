{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst semver = require('semver');\n\nconst cp = require('child_process');\n\nconst extend = require('util')._extend; // eslint-disable-line\n\n\nconst win = process.platform === 'win32';\n\nconst logWithPrefix = require('./util').logWithPrefix;\n\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '2.7.x || >=3.5.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: [path.join(process.env.SystemDrive || 'C:', 'Python37', 'python.exe'), path.join(process.env.SystemDrive || 'C:', 'Python27', 'python.exe')],\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    const SKIP = 0;\n    const FAIL = 1;\n    var toCheck = getChecks.apply(this);\n\n    function getChecks() {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`);\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n\n      var checks = [{\n        before: () => {\n          if (!this.configPython) {\n            this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          this.addLog('- \"--python=\" or \"npm config get python\" is ' + `\"${this.configPython}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: () => {\n          if (!this.env.PYTHON) {\n            this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n\n          this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: () => {\n          this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python2\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python2'\n      }];\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i];\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' + `${location}`);\n            },\n            check: this.checkExecPath,\n            arg: location\n          });\n        }\n\n        checks.push({\n          before: () => {\n            this.addLog('checking if the py launcher can be used to find Python');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n\n      return checks;\n    }\n\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      const check = toCheck.shift();\n\n      if (!check) {\n        return this.fail();\n      }\n\n      const before = check.before.apply(this);\n\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n\n      if (before === FAIL) {\n        return this.fail();\n      }\n\n      const args = [runChecks.bind(this)];\n\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n\n      check.check.apply(this, args);\n    }\n\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`;\n      args = args.map(a => `\"${a}\"`);\n      shell = true;\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`);\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(`- executing \"${this.pyLauncher}\" to get Python executable path`);\n    this.run(this.pyLauncher, this.argsExecutable, false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(`- \"${this.pyLauncher}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`);\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`);\n        return errorCallback(err);\n      }\n\n      this.addLog(`- version is \"${version}\"`);\n      const range = new semver.Range(this.semverRange);\n      var valid = false;\n\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(`- \"${execPath}\" does not have a valid version`);\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`);\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(`Found unsupported Python version ${version}`));\n      }\n\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    const opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n\n      if (err) {\n        return callback(err);\n      }\n\n      const execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`);\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    const errorLog = this.errorLog.join('\\n');\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable'; // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n\n    const info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', `- Use the switch --python=\"${pathExample}\"`, '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', `  npm config set python \"${pathExample}\"`, 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\n\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\n\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/lib/find-python.js"],"names":["path","require","log","semver","cp","extend","_extend","win","process","platform","logWithPrefix","PythonFinder","configPython","callback","errorLog","prototype","argsExecutable","argsVersion","semverRange","execFile","env","pyLauncher","winDefaultLocations","join","SystemDrive","addLog","message","verbose","push","findPython","SKIP","FAIL","toCheck","getChecks","apply","NODE_GYP_FORCE_PYTHON","before","check","checkCommand","arg","checks","PYTHON","i","length","location","checkExecPath","checkPyLauncher","runChecks","err","silly","stack","shift","fail","args","bind","unshift","command","errorCallback","exec","shell","map","a","run","execPath","version","range","Range","valid","test","Error","succeed","TERM","opts","execFileCallback","stdout","stderr","trim","info","nextTick","pathExample","error","finder","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst log = require('npmlog')\nconst semver = require('semver')\nconst cp = require('child_process')\nconst extend = require('util')._extend // eslint-disable-line\nconst win = process.platform === 'win32'\nconst logWithPrefix = require('./util').logWithPrefix\n\nfunction PythonFinder (configPython, callback) {\n  this.callback = callback\n  this.configPython = configPython\n  this.errorLog = []\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '2.7.x || >=3.5.0',\n\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: [\n    path.join(process.env.SystemDrive || 'C:', 'Python37', 'python.exe'),\n    path.join(process.env.SystemDrive || 'C:', 'Python27', 'python.exe')\n  ],\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython () {\n    const SKIP = 0; const FAIL = 1\n    var toCheck = getChecks.apply(this)\n\n    function getChecks () {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }]\n      }\n\n      var checks = [\n        {\n          before: () => {\n            if (!this.configPython) {\n              this.addLog(\n                'Python is not set from command line or npm configuration')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from command line or ' +\n              'npm configuration')\n            this.addLog('- \"--python=\" or \"npm config get python\" is ' +\n              `\"${this.configPython}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.configPython\n        },\n        {\n          before: () => {\n            if (!this.env.PYTHON) {\n              this.addLog('Python is not set from environment variable ' +\n                'PYTHON')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.PYTHON\n        },\n        {\n          before: () => { this.addLog('checking if \"python3\" can be used') },\n          check: this.checkCommand,\n          arg: 'python3'\n        },\n        {\n          before: () => { this.addLog('checking if \"python\" can be used') },\n          check: this.checkCommand,\n          arg: 'python'\n        },\n        {\n          before: () => { this.addLog('checking if \"python2\" can be used') },\n          check: this.checkCommand,\n          arg: 'python2'\n        }\n      ]\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i]\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' +\n                `${location}`)\n            },\n            check: this.checkExecPath,\n            arg: location\n          })\n        }\n        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python')\n          },\n          check: this.checkPyLauncher\n        })\n      }\n\n      return checks\n    }\n\n    function runChecks (err) {\n      this.log.silly('runChecks: err = %j', (err && err.stack) || err)\n\n      const check = toCheck.shift()\n      if (!check) {\n        return this.fail()\n      }\n\n      const before = check.before.apply(this)\n      if (before === SKIP) {\n        return runChecks.apply(this)\n      }\n      if (before === FAIL) {\n        return this.fail()\n      }\n\n      const args = [runChecks.bind(this)]\n      if (check.arg) {\n        args.unshift(check.arg)\n      }\n      check.check.apply(this, args)\n    }\n\n    runChecks.apply(this)\n  },\n\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand (command, errorCallback) {\n    var exec = command\n    var args = this.argsExecutable\n    var shell = false\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`\n      args = args.map(a => `\"${a}\"`)\n      shell = true\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`)\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`)\n        return errorCallback(err)\n      }\n      this.addLog(`- executable path is \"${execPath}\"`)\n      this.checkExecPath(execPath, errorCallback)\n    }.bind(this))\n  },\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  checkPyLauncher: function checkPyLauncher (errorCallback) {\n    this.log.verbose(\n      `- executing \"${this.pyLauncher}\" to get Python executable path`)\n    this.run(this.pyLauncher, this.argsExecutable, false,\n      function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n        if (err) {\n          this.addLog(\n            `- \"${this.pyLauncher}\" is not in PATH or produced an error`)\n          return errorCallback(err)\n        }\n        this.addLog(`- executable path is \"${execPath}\"`)\n        this.checkExecPath(execPath, errorCallback)\n      }.bind(this))\n  },\n\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath (execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`)\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`)\n        return errorCallback(err)\n      }\n      this.addLog(`- version is \"${version}\"`)\n\n      const range = new semver.Range(this.semverRange)\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack)\n        this.addLog(`- \"${execPath}\" does not have a valid version`)\n        this.addLog('- is it a Python executable?')\n        return errorCallback(err)\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`)\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED')\n        return errorCallback(new Error(\n          `Found unsupported Python version ${version}`))\n      }\n      this.succeed(execPath, version)\n    }.bind(this))\n  },\n\n  // Run an executable or shell command, trimming the output.\n  run: function run (exec, args, shell, callback) {\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env: env, shell: shell }\n\n    this.log.silly('execFile: exec = %j', exec)\n    this.log.silly('execFile: args = %j', args)\n    this.log.silly('execFile: opts = %j', opts)\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this))\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack)\n      return callback(err)\n    }\n\n    function execFileCallback (err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', (err && err.stack) || err)\n      this.log.silly('execFile result: stdout = %j', stdout)\n      this.log.silly('execFile result: stderr = %j', stderr)\n      if (err) {\n        return callback(err)\n      }\n      const execPath = stdout.trim()\n      callback(null, execPath)\n    }\n  },\n\n  succeed: function succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    process.nextTick(this.callback.bind(null, null, execPath))\n  },\n\n  fail: function fail () {\n    const errorLog = this.errorLog.join('\\n')\n\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe'\n      : '/path/to/pythonexecutable'\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n      '- Set the environment variable PYTHON',\n      '- Set the npm configuration variable python:',\n      `  npm config set python \"${pathExample}\"`,\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#installation',\n      '**********************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Python installation to use')))\n  }\n}\n\nfunction findPython (configPython, callback) {\n  var finder = new PythonFinder(configPython, callback)\n  finder.findPython()\n}\n\nmodule.exports = findPython\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n}\n"]},"metadata":{},"sourceType":"script"}