{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = configure;\nexports.usage = 'Attempts to configure node-gyp or nw-gyp build';\n\nvar napi = require('./util/napi.js');\n\nvar compile = require('./util/compile.js');\n\nvar handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nfunction configure(gyp, argv, callback) {\n  handle_gyp_opts(gyp, argv, function (err, result) {\n    var final_args = result.gyp.concat(result.pre); // pull select node-gyp configure options out of the npm environ\n\n    var known_gyp_args = ['dist-url', 'python', 'nodedir', 'msvs_version'];\n    known_gyp_args.forEach(function (key) {\n      var val = gyp.opts[key] || gyp.opts[key.replace('-', '_')];\n\n      if (val) {\n        final_args.push('--' + key + '=' + val);\n      }\n    }); // --ensure=false tell node-gyp to re-install node development headers\n    // but it is only respected by node-gyp install, so we have to call install\n    // as a separate step if the user passes it\n\n    if (gyp.opts.ensure === false) {\n      var install_args = final_args.concat(['install', '--ensure=false']);\n      compile.run_gyp(install_args, result.opts, function (err) {\n        if (err) return callback(err);\n\n        if (result.unparsed.length > 0) {\n          final_args = final_args.concat(['--']).concat(result.unparsed);\n        }\n\n        compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {\n          return callback(err);\n        });\n      });\n    } else {\n      if (result.unparsed.length > 0) {\n        final_args = final_args.concat(['--']).concat(result.unparsed);\n      }\n\n      compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {\n        if (!err && result.opts.napi_build_version) {\n          napi.swap_build_dir_out(result.opts.napi_build_version);\n        }\n\n        return callback(err);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/configure.js"],"names":["module","exports","configure","usage","napi","require","compile","handle_gyp_opts","gyp","argv","callback","err","result","final_args","concat","pre","known_gyp_args","forEach","key","val","opts","replace","push","ensure","install_args","run_gyp","unparsed","length","napi_build_version","swap_build_dir_out"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,SAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,gDAAhB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AAEA,SAASH,SAAT,CAAmBM,GAAnB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACpCH,EAAAA,eAAe,CAACC,GAAD,EAAKC,IAAL,EAAU,UAASE,GAAT,EAAaC,MAAb,EAAqB;AAC1C,QAAIC,UAAU,GAAGD,MAAM,CAACJ,GAAP,CAAWM,MAAX,CAAkBF,MAAM,CAACG,GAAzB,CAAjB,CAD0C,CAE1C;;AACA,QAAIC,cAAc,GAAG,CAAC,UAAD,EAAY,QAAZ,EAAqB,SAArB,EAA+B,cAA/B,CAArB;AACAA,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAASC,GAAT,EAAc;AACjC,UAAIC,GAAG,GAAGX,GAAG,CAACY,IAAJ,CAASF,GAAT,KAAiBV,GAAG,CAACY,IAAJ,CAASF,GAAG,CAACG,OAAJ,CAAY,GAAZ,EAAgB,GAAhB,CAAT,CAA3B;;AACA,UAAIF,GAAJ,EAAS;AACNN,QAAAA,UAAU,CAACS,IAAX,CAAgB,OAAKJ,GAAL,GAAS,GAAT,GAAaC,GAA7B;AACF;AACJ,KALD,EAJ0C,CAU1C;AACA;AACA;;AACA,QAAIX,GAAG,CAACY,IAAJ,CAASG,MAAT,KAAoB,KAAxB,EAA+B;AAC3B,UAAIC,YAAY,GAAGX,UAAU,CAACC,MAAX,CAAkB,CAAC,SAAD,EAAW,gBAAX,CAAlB,CAAnB;AACAR,MAAAA,OAAO,CAACmB,OAAR,CAAgBD,YAAhB,EAA6BZ,MAAM,CAACQ,IAApC,EAAyC,UAAST,GAAT,EAAc;AACnD,YAAIA,GAAJ,EAAS,OAAOD,QAAQ,CAACC,GAAD,CAAf;;AACT,YAAIC,MAAM,CAACc,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC5Bd,UAAAA,UAAU,GAAGA,UAAU,CACTC,MADD,CACQ,CAAC,IAAD,CADR,EAECA,MAFD,CAEQF,MAAM,CAACc,QAFf,CAAb;AAGH;;AACDpB,QAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC,WAAD,EAAcX,MAAd,CAAqBD,UAArB,CAAhB,EAAiDD,MAAM,CAACQ,IAAxD,EAA6D,UAAST,GAAT,EAAc;AACvE,iBAAOD,QAAQ,CAACC,GAAD,CAAf;AACH,SAFD;AAGH,OAVD;AAWH,KAbD,MAaO;AACH,UAAIC,MAAM,CAACc,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC5Bd,QAAAA,UAAU,GAAGA,UAAU,CACTC,MADD,CACQ,CAAC,IAAD,CADR,EAECA,MAFD,CAEQF,MAAM,CAACc,QAFf,CAAb;AAGH;;AACDpB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC,WAAD,EAAcX,MAAd,CAAqBD,UAArB,CAAhB,EAAiDD,MAAM,CAACQ,IAAxD,EAA6D,UAAST,GAAT,EAAc;AACvE,YAAI,CAACA,GAAD,IAAQC,MAAM,CAACQ,IAAP,CAAYQ,kBAAxB,EAA4C;AACxCxB,UAAAA,IAAI,CAACyB,kBAAL,CAAwBjB,MAAM,CAACQ,IAAP,CAAYQ,kBAApC;AACH;;AACD,eAAOlB,QAAQ,CAACC,GAAD,CAAf;AACH,OALD;AAMH;AACJ,GAvCc,CAAf;AAwCH","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = configure;\n\nexports.usage = 'Attempts to configure node-gyp or nw-gyp build';\n\nvar napi = require('./util/napi.js');\nvar compile = require('./util/compile.js');\nvar handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nfunction configure(gyp, argv, callback) {\n    handle_gyp_opts(gyp,argv,function(err,result) {\n        var final_args = result.gyp.concat(result.pre);\n        // pull select node-gyp configure options out of the npm environ\n        var known_gyp_args = ['dist-url','python','nodedir','msvs_version'];\n        known_gyp_args.forEach(function(key) {\n            var val = gyp.opts[key] || gyp.opts[key.replace('-','_')];\n            if (val) {\n               final_args.push('--'+key+'='+val);\n            }\n        });\n        // --ensure=false tell node-gyp to re-install node development headers\n        // but it is only respected by node-gyp install, so we have to call install\n        // as a separate step if the user passes it\n        if (gyp.opts.ensure === false) {\n            var install_args = final_args.concat(['install','--ensure=false']);\n            compile.run_gyp(install_args,result.opts,function(err) {\n                if (err) return callback(err);\n                if (result.unparsed.length > 0) {\n                    final_args = final_args.\n                                  concat(['--']).\n                                  concat(result.unparsed);\n                }\n                compile.run_gyp(['configure'].concat(final_args),result.opts,function(err) {\n                    return callback(err);\n                });\n            });\n        } else {\n            if (result.unparsed.length > 0) {\n                final_args = final_args.\n                              concat(['--']).\n                              concat(result.unparsed);\n            }\n            compile.run_gyp(['configure'].concat(final_args),result.opts,function(err) {\n                if (!err && result.opts.napi_build_version) {\n                    napi.swap_build_dir_out(result.opts.napi_build_version);\n                }\n                return callback(err);\n            });\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"script"}