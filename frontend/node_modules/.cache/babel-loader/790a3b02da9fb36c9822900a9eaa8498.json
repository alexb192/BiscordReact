{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = _package;\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar write = require('fs').createWriteStream;\n\nvar existsAsync = fs.exists || path.exists;\n\nvar mkdirp = require('mkdirp');\n\nvar tar = require('tar');\n\nfunction _package(gyp, argv, callback) {\n  var packlist = require('npm-packlist');\n\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var from = opts.module_path;\n  var binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot package because \" + binary_module + \" missing: run `node-pre-gyp rebuild` first\"));\n    }\n\n    var tarball = opts.staged_tarball;\n\n    var filter_func = function (entry) {\n      // ensure directories are +x\n      // https://github.com/mapnik/node-mapnik/issues/262\n      log.info('package', 'packing ' + entry.path);\n      return true;\n    };\n\n    mkdirp(path.dirname(tarball), function (err) {\n      if (err) return callback(err);\n      packlist({\n        path: from\n      }).then(function (files) {\n        var base = path.basename(from);\n        files = files.map(function (file) {\n          return path.join(base, file);\n        });\n        tar.create({\n          portable: true,\n          gzip: true,\n          onentry: filter_func,\n          file: tarball,\n          cwd: path.dirname(from)\n        }, files, function (err) {\n          if (err) console.error('[' + package_json.name + '] ' + err.message);else log.info('package', 'Binary staged at \"' + tarball + '\"');\n          return callback(err);\n        });\n      }, callback);\n    });\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/package.js"],"names":["module","exports","_package","usage","fs","require","path","log","versioning","napi","write","createWriteStream","existsAsync","exists","mkdirp","tar","gyp","argv","callback","packlist","package_json","JSON","parse","readFileSync","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","from","module_path","binary_module","join","module_name","found","Error","tarball","staged_tarball","filter_func","entry","info","dirname","err","then","files","base","basename","map","file","create","portable","gzip","onentry","cwd","console","error","name","message"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = _package;\n\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar napi = require('./util/napi.js');\nvar write = require('fs').createWriteStream;\nvar existsAsync = fs.exists || path.exists;\nvar mkdirp = require('mkdirp');\nvar tar = require('tar');\n\nfunction _package(gyp, argv, callback) {\n    var packlist = require('npm-packlist');\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n    var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n    var from = opts.module_path;\n    var binary_module = path.join(from,opts.module_name + '.node');\n    existsAsync(binary_module,function(found) {\n        if (!found) {\n            return callback(new Error(\"Cannot package because \" + binary_module + \" missing: run `node-pre-gyp rebuild` first\"));\n        }\n        var tarball = opts.staged_tarball;\n        var filter_func = function(entry) {\n            // ensure directories are +x\n            // https://github.com/mapnik/node-mapnik/issues/262\n            log.info('package','packing ' + entry.path);\n            return true;\n        };\n        mkdirp(path.dirname(tarball),function(err) {\n            if (err) return callback(err);\n            packlist({ path: from }).then(function(files) {\n                var base = path.basename(from);\n                files = files.map(function(file) {\n                    return path.join(base, file);\n                });\n                tar.create({\n                    portable: true,\n                    gzip: true,\n                    onentry: filter_func,\n                    file: tarball,\n                    cwd: path.dirname(from)\n                }, files, function(err) {\n                    if (err)  console.error('['+package_json.name+'] ' + err.message);\n                    else log.info('package','Binary staged at \"' + tarball + '\"');\n                    return callback(err);\n                });\n            }, callback);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}