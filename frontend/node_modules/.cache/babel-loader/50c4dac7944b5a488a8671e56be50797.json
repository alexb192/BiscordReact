{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst glob = require('glob');\n\nconst log = require('npmlog');\n\nconst which = require('which');\n\nconst win = process.platform === 'win32';\n\nfunction build(gyp, argv, callback) {\n  var platformMake = 'make';\n\n  if (process.platform === 'aix') {\n    platformMake = 'gmake';\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake';\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target;\n    });\n  }\n\n  var makeCommand = gyp.opts.make || process.env.MAKE || platformMake;\n  var command = win ? 'msbuild' : makeCommand;\n  var jobs = gyp.opts.jobs || process.env.JOBS;\n  var buildType;\n  var config;\n  var arch;\n  var nodeDir;\n  var guessedSolution;\n  loadConfigGypi();\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi() {\n    var configPath = path.resolve('build', 'config.gypi');\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'));\n        } else {\n          callback(err);\n        }\n\n        return;\n      }\n\n      config = JSON.parse(data.replace(/#.+\\n/, '')); // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n\n      buildType = config.target_defaults.default_configuration;\n      arch = config.variables.target_arch;\n      nodeDir = config.variables.nodedir;\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release';\n      }\n\n      if (!buildType) {\n        buildType = 'Release';\n      }\n\n      log.verbose('build type', buildType);\n      log.verbose('architecture', arch);\n      log.verbose('node dev dir', nodeDir);\n\n      if (win) {\n        findSolutionFile();\n      } else {\n        doWhich();\n      }\n    });\n  }\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n\n  function findSolutionFile() {\n    glob('build/*.sln', function (err, files) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'));\n      }\n\n      guessedSolution = files[0];\n      log.verbose('found first Solution file', guessedSolution);\n      doWhich();\n    });\n  }\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n\n  function doWhich() {\n    // On Windows use msbuild provided by node-gyp configure\n    if (win) {\n      if (!config.variables.msbuild_path) {\n        return callback(new Error('MSBuild is not set, please run `node-gyp configure`.'));\n      }\n\n      command = config.variables.msbuild_path;\n      log.verbose('using MSBuild:', command);\n      doBuild();\n      return;\n    } // First make sure we have the build command in the PATH\n\n\n    which(command, function (err, execPath) {\n      if (err) {\n        // Some other error or 'make' not found on Unix, report that to the user\n        callback(err);\n        return;\n      }\n\n      log.verbose('`which` succeeded for `' + command + '`', execPath);\n      doBuild();\n    });\n  }\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n\n  function doBuild() {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose;\n    var j;\n\n    if (!win && verbose) {\n      argv.push('V=1');\n    }\n\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal');\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo');\n    } // Specify the build type, Release by default\n\n\n    if (win) {\n      // Convert .gypi config target_arch to MSBuild /Platform\n      // Since there are many ways to state '32-bit Intel', default to it.\n      // N.B. msbuild's Condition string equality tests are case-insensitive.\n      var archLower = arch.toLowerCase();\n      var p = archLower === 'x64' ? 'x64' : archLower === 'arm' ? 'ARM' : archLower === 'arm64' ? 'ARM64' : 'Win32';\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p);\n\n      if (jobs) {\n        j = parseInt(jobs, 10);\n\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length);\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType); // Invoke the Makefile in the 'build' dir.\n\n      argv.push('-C');\n      argv.push('build');\n\n      if (jobs) {\n        j = parseInt(jobs, 10);\n\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs');\n          argv.push(j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs');\n          argv.push(require('os').cpus().length);\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) === '.sln';\n      });\n\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution);\n      }\n    }\n\n    var proc = gyp.spawn(command, argv);\n    proc.on('exit', onExit);\n  }\n\n  function onExit(code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code));\n    }\n\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal));\n    }\n\n    callback();\n  }\n}\n\nmodule.exports = build;\nmodule.exports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module';","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/lib/build.js"],"names":["fs","require","path","glob","log","which","win","process","platform","build","gyp","argv","callback","platformMake","indexOf","length","map","target","makeCommand","opts","make","env","MAKE","command","jobs","JOBS","buildType","config","arch","nodeDir","guessedSolution","loadConfigGypi","configPath","resolve","readFile","err","data","code","Error","JSON","parse","replace","target_defaults","default_configuration","variables","target_arch","nodedir","debug","verbose","findSolutionFile","doWhich","files","msbuild_path","doBuild","execPath","levels","level","j","push","archLower","toLowerCase","p","parseInt","isNaN","toUpperCase","cpus","hasSln","some","arg","extname","unshift","solution","proc","spawn","on","onExit","signal","module","exports","usage"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst glob = require('glob')\nconst log = require('npmlog')\nconst which = require('which')\nconst win = process.platform === 'win32'\n\nfunction build (gyp, argv, callback) {\n  var platformMake = 'make'\n  if (process.platform === 'aix') {\n    platformMake = 'gmake'\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake'\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target\n    })\n  }\n\n  var makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  var command = win ? 'msbuild' : makeCommand\n  var jobs = gyp.opts.jobs || process.env.JOBS\n  var buildType\n  var config\n  var arch\n  var nodeDir\n  var guessedSolution\n\n  loadConfigGypi()\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi () {\n    var configPath = path.resolve('build', 'config.gypi')\n\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile () {\n    glob('build/*.sln', function (err, files) {\n      if (err) {\n        return callback(err)\n      }\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'))\n      }\n      guessedSolution = files[0]\n      log.verbose('found first Solution file', guessedSolution)\n      doWhich()\n    })\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich () {\n    // On Windows use msbuild provided by node-gyp configure\n    if (win) {\n      if (!config.variables.msbuild_path) {\n        return callback(new Error(\n          'MSBuild is not set, please run `node-gyp configure`.'))\n      }\n      command = config.variables.msbuild_path\n      log.verbose('using MSBuild:', command)\n      doBuild()\n      return\n    }\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        // Some other error or 'make' not found on Unix, report that to the user\n        callback(err)\n        return\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath)\n      doBuild()\n    })\n  }\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild () {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    var j\n\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      // Convert .gypi config target_arch to MSBuild /Platform\n      // Since there are many ways to state '32-bit Intel', default to it.\n      // N.B. msbuild's Condition string equality tests are case-insensitive.\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64'\n        : (archLower === 'arm' ? 'ARM'\n          : (archLower === 'arm64' ? 'ARM64' : 'Win32'))\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) === '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n  }\n\n  function onExit (code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code))\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal))\n    }\n    callback()\n  }\n}\n\nmodule.exports = build\nmodule.exports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module'\n"]},"metadata":{},"sourceType":"script"}