{"ast":null,"code":"var iconv,\n    inherits = require('util').inherits,\n    stream = require('stream');\n\nvar regex = /(?:charset|encoding)\\s*=\\s*['\"]? *([\\w\\-]+)/i;\ninherits(StreamDecoder, stream.Transform);\n\nfunction StreamDecoder(charset) {\n  if (!(this instanceof StreamDecoder)) return new StreamDecoder(charset);\n  stream.Transform.call(this, charset);\n  this.charset = charset;\n  this.parsed_chunk = false;\n}\n\nStreamDecoder.prototype._transform = function (chunk, encoding, done) {\n  var res, found; // try get charset from chunk, just once\n\n  if (this.charset == 'utf8' && !this.parsed_chunk) {\n    this.parsed_chunk = true;\n    var matches = regex.exec(chunk.toString());\n\n    if (matches) {\n      found = matches[1].toLowerCase();\n      this.charset = found == 'utf-8' ? 'utf8' : found;\n    }\n  }\n\n  try {\n    res = iconv.decode(chunk, this.charset);\n  } catch (e) {\n    // something went wrong, just return original chunk\n    res = chunk;\n  }\n\n  this.push(res);\n  done();\n};\n\nmodule.exports = function (charset) {\n  try {\n    if (!iconv) iconv = require('iconv-lite');\n  } catch (e) {\n    /* iconv not found */\n  }\n\n  if (iconv) return new StreamDecoder(charset);else return new stream.PassThrough();\n};","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/needle/lib/decoder.js"],"names":["iconv","inherits","require","stream","regex","StreamDecoder","Transform","charset","call","parsed_chunk","prototype","_transform","chunk","encoding","done","res","found","matches","exec","toString","toLowerCase","decode","e","push","module","exports","PassThrough"],"mappings":"AAAA,IAAIA,KAAJ;AAAA,IACIC,QAAQ,GAAIC,OAAO,CAAC,MAAD,CAAP,CAAgBD,QADhC;AAAA,IAEIE,MAAM,GAAMD,OAAO,CAAC,QAAD,CAFvB;;AAIA,IAAIE,KAAK,GAAG,8CAAZ;AAEAH,QAAQ,CAACI,aAAD,EAAgBF,MAAM,CAACG,SAAvB,CAAR;;AAEA,SAASD,aAAT,CAAuBE,OAAvB,EAAgC;AAC9B,MAAI,EAAE,gBAAgBF,aAAlB,CAAJ,EACE,OAAO,IAAIA,aAAJ,CAAkBE,OAAlB,CAAP;AAEFJ,EAAAA,MAAM,CAACG,SAAP,CAAiBE,IAAjB,CAAsB,IAAtB,EAA4BD,OAA5B;AACA,OAAKA,OAAL,GAAeA,OAAf;AACA,OAAKE,YAAL,GAAoB,KAApB;AACD;;AAEDJ,aAAa,CAACK,SAAd,CAAwBC,UAAxB,GAAqC,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AACnE,MAAIC,GAAJ,EAASC,KAAT,CADmE,CAGnE;;AACA,MAAI,KAAKT,OAAL,IAAgB,MAAhB,IAA0B,CAAC,KAAKE,YAApC,EAAkD;AAChD,SAAKA,YAAL,GAAoB,IAApB;AAEA,QAAIQ,OAAO,GAAGb,KAAK,CAACc,IAAN,CAAWN,KAAK,CAACO,QAAN,EAAX,CAAd;;AACA,QAAIF,OAAJ,EAAa;AACXD,MAAAA,KAAK,GAAGC,OAAO,CAAC,CAAD,CAAP,CAAWG,WAAX,EAAR;AACA,WAAKb,OAAL,GAAeS,KAAK,IAAI,OAAT,GAAmB,MAAnB,GAA4BA,KAA3C;AACD;AACF;;AAED,MAAI;AACFD,IAAAA,GAAG,GAAGf,KAAK,CAACqB,MAAN,CAAaT,KAAb,EAAoB,KAAKL,OAAzB,CAAN;AACD,GAFD,CAEE,OAAMe,CAAN,EAAS;AAAE;AACXP,IAAAA,GAAG,GAAGH,KAAN;AACD;;AAED,OAAKW,IAAL,CAAUR,GAAV;AACAD,EAAAA,IAAI;AACL,CAtBD;;AAwBAU,MAAM,CAACC,OAAP,GAAiB,UAASlB,OAAT,EAAkB;AACjC,MAAI;AACF,QAAI,CAACP,KAAL,EAAYA,KAAK,GAAGE,OAAO,CAAC,YAAD,CAAf;AACb,GAFD,CAEE,OAAMoB,CAAN,EAAS;AACT;AACD;;AAED,MAAItB,KAAJ,EACE,OAAO,IAAIK,aAAJ,CAAkBE,OAAlB,CAAP,CADF,KAGE,OAAO,IAAIJ,MAAM,CAACuB,WAAX,EAAP;AACH,CAXD","sourcesContent":["var iconv,\n    inherits  = require('util').inherits,\n    stream    = require('stream');\n\nvar regex = /(?:charset|encoding)\\s*=\\s*['\"]? *([\\w\\-]+)/i;\n\ninherits(StreamDecoder, stream.Transform);\n\nfunction StreamDecoder(charset) {\n  if (!(this instanceof StreamDecoder))\n    return new StreamDecoder(charset);\n\n  stream.Transform.call(this, charset);\n  this.charset = charset;\n  this.parsed_chunk = false;\n}\n\nStreamDecoder.prototype._transform = function(chunk, encoding, done) {\n  var res, found;\n\n  // try get charset from chunk, just once\n  if (this.charset == 'utf8' && !this.parsed_chunk) {\n    this.parsed_chunk = true;\n\n    var matches = regex.exec(chunk.toString());\n    if (matches) {\n      found = matches[1].toLowerCase();\n      this.charset = found == 'utf-8' ? 'utf8' : found;\n    }\n  }\n\n  try {\n    res = iconv.decode(chunk, this.charset);\n  } catch(e) { // something went wrong, just return original chunk\n    res = chunk;\n  }\n\n  this.push(res);\n  done();\n}\n\nmodule.exports = function(charset) {\n  try {\n    if (!iconv) iconv = require('iconv-lite');\n  } catch(e) {\n    /* iconv not found */\n  }\n\n  if (iconv)\n    return new StreamDecoder(charset);\n  else\n    return new stream.PassThrough;\n}\n"]},"metadata":{},"sourceType":"script"}