{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = publish;\nexports.usage = 'Publishes pre-built binary (requires aws-sdk)';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar s3_setup = require('./util/s3_setup.js');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar url = require('url');\n\nvar config = require('rc')(\"node_pre_gyp\", {\n  acl: \"public-read\"\n});\n\nfunction publish(gyp, argv, callback) {\n  var AWS = require(\"aws-sdk\");\n\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var tarball = opts.staged_tarball;\n  existsAsync(tarball, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot publish because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n    }\n\n    log.info('publish', 'Detecting s3 credentials');\n    s3_setup.detect(opts.hosted_path, config);\n    var key_name = url.resolve(config.prefix, opts.package_name);\n    log.info('publish', 'Authenticating with s3');\n    AWS.config.update(config);\n    var s3 = new AWS.S3();\n    var s3_opts = {\n      Bucket: config.bucket,\n      Key: key_name\n    };\n    var remote_package = 'https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key;\n    log.info('publish', 'Checking for existing binary at ' + remote_package);\n    s3.headObject(s3_opts, function (err, meta) {\n      if (meta) log.info('publish', JSON.stringify(meta));\n\n      if (err && err.code == 'NotFound') {\n        // we are safe to publish because\n        // the object does not already exist\n        log.info('publish', 'Preparing to put object');\n        var s3_put = new AWS.S3();\n        var s3_put_opts = {\n          ACL: config.acl,\n          Body: fs.createReadStream(tarball),\n          Bucket: config.bucket,\n          Key: key_name\n        };\n        log.info('publish', 'Putting object');\n\n        try {\n          s3_put.putObject(s3_put_opts, function (err, resp) {\n            log.info('publish', 'returned from putting object');\n\n            if (err) {\n              log.info('publish', 's3 putObject error: \"' + err + '\"');\n              return callback(err);\n            }\n\n            if (resp) log.info('publish', 's3 putObject response: \"' + JSON.stringify(resp) + '\"');\n            log.info('publish', 'successfully put object');\n            console.log('[' + package_json.name + '] published to ' + remote_package);\n            return callback();\n          });\n        } catch (err) {\n          log.info('publish', 's3 putObject error: \"' + err + '\"');\n          return callback(err);\n        }\n      } else if (err) {\n        log.info('publish', 's3 headObject error: \"' + err + '\"');\n        return callback(err);\n      } else {\n        log.error('publish', 'Cannot publish over existing version');\n        log.error('publish', \"Update the 'version' field in package.json and try again\");\n        log.error('publish', 'If the previous version was published in error see:');\n        log.error('publish', '\\t node-pre-gyp unpublish');\n        return callback(new Error('Failed publishing to ' + remote_package));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/publish.js"],"names":["module","exports","publish","usage","fs","require","path","log","versioning","napi","s3_setup","existsAsync","exists","url","config","acl","gyp","argv","callback","AWS","package_json","JSON","parse","readFileSync","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","tarball","staged_tarball","found","Error","info","detect","hosted_path","key_name","resolve","prefix","package_name","update","s3","S3","s3_opts","Bucket","bucket","Key","remote_package","headObject","err","meta","stringify","code","s3_put","s3_put_opts","ACL","Body","createReadStream","putObject","resp","console","name","error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = publish;\n\nexports.usage = 'Publishes pre-built binary (requires aws-sdk)';\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('npmlog');\nvar versioning = require('./util/versioning.js');\nvar napi = require('./util/napi.js');\nvar s3_setup = require('./util/s3_setup.js');\nvar existsAsync = fs.exists || path.exists;\nvar url = require('url');\nvar config = require('rc')(\"node_pre_gyp\",{acl:\"public-read\"});\n\nfunction publish(gyp, argv, callback) {\n    var AWS = require(\"aws-sdk\");\n    var package_json = JSON.parse(fs.readFileSync('./package.json'));\n    var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n    var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n    var tarball = opts.staged_tarball;\n    existsAsync(tarball,function(found) {\n        if (!found) {\n            return callback(new Error(\"Cannot publish because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n        }\n        log.info('publish', 'Detecting s3 credentials');\n        s3_setup.detect(opts.hosted_path,config);\n        var key_name = url.resolve(config.prefix,opts.package_name);\n        log.info('publish', 'Authenticating with s3');\n        AWS.config.update(config);\n        var s3 =  new AWS.S3();\n        var s3_opts = {  Bucket: config.bucket,\n                         Key: key_name\n                      };\n        var remote_package = 'https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key;\n        log.info('publish', 'Checking for existing binary at ' + remote_package);\n        s3.headObject(s3_opts, function(err, meta){\n            if (meta) log.info('publish', JSON.stringify(meta));\n            if (err && err.code == 'NotFound') {\n                // we are safe to publish because\n                // the object does not already exist\n                log.info('publish', 'Preparing to put object');\n                var s3_put = new AWS.S3();\n                var s3_put_opts = {  ACL: config.acl,\n                                     Body: fs.createReadStream(tarball),\n                                     Bucket: config.bucket,\n                                     Key: key_name\n                                  };\n                log.info('publish', 'Putting object');\n                try {\n                    s3_put.putObject(s3_put_opts, function(err, resp){\n                        log.info('publish', 'returned from putting object');\n                        if(err) {\n                           log.info('publish', 's3 putObject error: \"' + err + '\"');\n                           return callback(err);\n                        }\n                        if (resp) log.info('publish', 's3 putObject response: \"' + JSON.stringify(resp) + '\"');\n                        log.info('publish', 'successfully put object');\n                        console.log('['+package_json.name+'] published to ' + remote_package);\n                        return callback();\n                    });\n              } catch (err) {\n                   log.info('publish', 's3 putObject error: \"' + err + '\"');\n                   return callback(err);\n              }\n            } else if (err) {\n                log.info('publish', 's3 headObject error: \"' + err + '\"');\n                return callback(err);\n            } else {\n                log.error('publish','Cannot publish over existing version');\n                log.error('publish',\"Update the 'version' field in package.json and try again\");\n                log.error('publish','If the previous version was published in error see:');\n                log.error('publish','\\t node-pre-gyp unpublish');\n                return callback(new Error('Failed publishing to ' + remote_package));\n            }\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}