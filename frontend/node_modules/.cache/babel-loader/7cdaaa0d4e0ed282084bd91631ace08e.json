{"ast":null,"code":"'use strict'; // tar -x\n\nconst hlo = require('./high-level-opt.js');\n\nconst Unpack = require('./unpack.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst path = require('path');\n\nconst x = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') cb = opt_, files = null, opt_ = {};else if (Array.isArray(opt_)) files = opt_, opt_ = {};\n  if (typeof files === 'function') cb = files, files = null;\n  if (!files) files = [];else files = Array.from(files);\n  const opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') throw new TypeError('callback not supported for sync tar functions');\n  if (!opt.file && typeof cb === 'function') throw new TypeError('callback only supported with file option');\n  if (files.length) filesFilter(opt, files);\n  return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);\n}; // construct a filter that limits the file entries listed\n// include child entries if a dir is included\n\n\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [f.replace(/\\/+$/, ''), true]));\n  const filter = opt.filter;\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.';\n    const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n\n  opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\\/+$/, '')) : file => mapHas(file.replace(/\\/+$/, ''));\n};\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt);\n  const file = opt.file;\n  let threw = true;\n  let fd;\n  const stat = fs.statSync(file); // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  });\n  stream.pipe(u);\n};\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt);\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const file = opt.file;\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject);\n    u.on('close', resolve); // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n\n    fs.stat(file, (er, stat) => {\n      if (er) reject(er);else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(u);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\n\nconst extractSync = opt => {\n  return new Unpack.Sync(opt);\n};\n\nconst extract = opt => {\n  return new Unpack(opt);\n};","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/node_modules/tar/lib/extract.js"],"names":["hlo","require","Unpack","fs","fsm","path","x","module","exports","opt_","files","cb","Array","isArray","from","opt","sync","TypeError","file","length","filesFilter","extractFileSync","extractFile","extractSync","extract","map","Map","f","replace","filter","mapHas","r","root","parse","ret","has","get","dirname","set","entry","u","Sync","threw","fd","stat","statSync","readSize","maxReadSize","stream","ReadStreamSync","size","pipe","p","Promise","resolve","reject","on","er","ReadStream","then"],"mappings":"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","sourcesContent":["'use strict'\n\n// tar -x\nconst hlo = require('./high-level-opt.js')\nconst Unpack = require('./unpack.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\n\nconst x = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function')\n    cb = opt_, files = null, opt_ = {}\n  else if (Array.isArray(opt_))\n    files = opt_, opt_ = {}\n\n  if (typeof files === 'function')\n    cb = files, files = null\n\n  if (!files)\n    files = []\n  else\n    files = Array.from(files)\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function')\n    throw new TypeError('callback not supported for sync tar functions')\n\n  if (!opt.file && typeof cb === 'function')\n    throw new TypeError('callback only supported with file option')\n\n  if (files.length)\n    filesFilter(opt, files)\n\n  return opt.file && opt.sync ? extractFileSync(opt)\n    : opt.file ? extractFile(opt, cb)\n    : opt.sync ? extractSync(opt)\n    : extract(opt)\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [f.replace(/\\/+$/, ''), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\\/+$/, ''))\n    : file => mapHas(file.replace(/\\/+$/, ''))\n}\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt)\n\n  const file = opt.file\n  let threw = true\n  let fd\n  const stat = fs.statSync(file)\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  const readSize = opt.maxReadSize || 16*1024*1024\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  })\n  stream.pipe(u)\n}\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt)\n  const readSize = opt.maxReadSize || 16*1024*1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject)\n    u.on('close', resolve)\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, (er, stat) => {\n      if (er)\n        reject(er)\n      else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        })\n        stream.on('error', reject)\n        stream.pipe(u)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst extractSync = opt => {\n  return new Unpack.Sync(opt)\n}\n\nconst extract = opt => {\n  return new Unpack(opt)\n}\n"]},"metadata":{},"sourceType":"script"}