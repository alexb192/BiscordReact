{"ast":null,"code":"\"use strict\";\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar nopt = require('nopt');\n\nvar log = require('npmlog');\n\nlog.disableProgress();\n\nvar napi = require('./util/napi.js');\n\nvar EE = require('events').EventEmitter;\n\nvar inherits = require('util').inherits;\n\nvar commands = ['clean', 'install', 'reinstall', 'build', 'rebuild', 'package', 'testpackage', 'publish', 'unpublish', 'info', 'testbinary', 'reveal', 'configure'];\nvar aliases = {}; // differentiate node-pre-gyp's logs from npm's\n\nlog.heading = 'node-pre-gyp';\nexports.find = require('./pre-binding').find;\n\nfunction Run() {\n  var self = this;\n  this.commands = {};\n  commands.forEach(function (command) {\n    self.commands[command] = function (argv, callback) {\n      log.verbose('command', command, argv);\n      return require('./' + command)(self, argv, callback);\n    };\n  });\n}\n\ninherits(Run, EE);\nexports.Run = Run;\nvar proto = Run.prototype;\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,\n  // everywhere\n  arch: String,\n  // 'configure'\n  debug: Boolean,\n  // 'build'\n  directory: String,\n  // bin\n  proxy: String,\n  // 'install'\n  loglevel: String // everywhere\n\n};\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n/**\n * Parses the given argv array and sets the 'opts',\n * 'argv' and 'command' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  var commands = this.todo = []; // create a copy of the argv array with aliases mapped\n\n  argv = this.argv.map(function (arg) {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n\n    return arg;\n  }, this); // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n\n  argv.slice().forEach(function (arg) {\n    if (arg in this.commands) {\n      var args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n\n      commands.push({\n        name: arg,\n        args: []\n      });\n    }\n  }, this);\n\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  } // expand commands entries for multiple napi builds\n\n\n  var dir = this.opts.directory;\n  if (dir == null) dir = process.cwd();\n  var package_json = JSON.parse(fs.readFileSync(path.join(dir, 'package.json')));\n  this.todo = napi.expand_commands(package_json, this.opts, commands); // support for inheriting config env variables from npm\n\n  var npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(function (name) {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    var val = process.env[name];\n\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length); // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n\n      if (name === 'argv') {\n        if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) {// do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  }, this);\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n\n  log.resume();\n};\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\n\nproto.usage = function usage() {\n  var str = ['', '  Usage: node-pre-gyp <command> [options]', '', '  where <command> is one of:', commands.map(function (c) {\n    return '    - ' + c + ' - ' + require('./' + c).usage;\n  }).join('\\n'), '', 'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\\n');\n  return str;\n};\n/**\n * Version number getter.\n */\n\n\nObject.defineProperty(proto, 'version', {\n  get: function () {\n    return this.package.version;\n  },\n  enumerable: true\n});","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/node-pre-gyp.js"],"names":["module","exports","fs","require","path","nopt","log","disableProgress","napi","EE","EventEmitter","inherits","commands","aliases","heading","find","Run","self","forEach","command","argv","callback","verbose","proto","prototype","package","configDefs","help","Boolean","arch","String","debug","directory","proxy","loglevel","shorthands","release","C","j","silent","silly","parseArgv","parseOpts","opts","remain","slice","todo","map","arg","args","splice","indexOf","shift","length","push","name","dir","process","cwd","package_json","JSON","parse","readFileSync","join","expand_commands","npm_config_prefix","Object","keys","env","val","level","substring","resume","usage","str","c","version","resolve","__dirname","versions","node","defineProperty","get","enumerable"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar nopt = require('nopt');\nvar log = require('npmlog');\nlog.disableProgress();\nvar napi = require('./util/napi.js');\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('util').inherits;\nvar commands = [\n      'clean',\n      'install',\n      'reinstall',\n      'build',\n      'rebuild',\n      'package',\n      'testpackage',\n      'publish',\n      'unpublish',\n      'info',\n      'testbinary',\n      'reveal',\n      'configure'\n    ];\nvar aliases = {};\n\n// differentiate node-pre-gyp's logs from npm's\nlog.heading = 'node-pre-gyp';\n\nexports.find = require('./pre-binding').find;\n\nfunction Run() {\n  var self = this;\n\n  this.commands = {};\n\n  commands.forEach(function (command) {\n    self.commands[command] = function (argv, callback) {\n      log.verbose('command', command, argv);\n      return require('./' + command)(self, argv, callback);\n    };\n  });\n}\ninherits(Run, EE);\nexports.Run = Run;\nvar proto = Run.prototype;\n\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n    help: Boolean,     // everywhere\n    arch: String,      // 'configure'\n    debug: Boolean,    // 'build'\n    directory: String, // bin\n    proxy: String,     // 'install'\n    loglevel: String,  // everywhere\n};\n\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n    release: '--no-debug',\n    C: '--directory',\n    debug: '--debug',\n    j: '--jobs',\n    silent: '--loglevel=silent',\n    silly: '--loglevel=silly',\n    verbose: '--loglevel=verbose',\n};\n\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n\n/**\n * Parses the given argv array and sets the 'opts',\n * 'argv' and 'command' properties.\n */\n\nproto.parseArgv = function parseOpts (argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  var commands = this.todo = [];\n\n  // create a copy of the argv array with aliases mapped\n  argv = this.argv.map(function (arg) {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n    return arg;\n  }, this);\n\n  // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n  argv.slice().forEach(function (arg) {\n    if (arg in this.commands) {\n      var args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n      commands.push({ name: arg, args: [] });\n    }\n  }, this);\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  }\n\n  // expand commands entries for multiple napi builds\n  var dir = this.opts.directory;\n  if (dir == null) dir = process.cwd();\n  var package_json = JSON.parse(fs.readFileSync(path.join(dir,'package.json')));\n\n  this.todo = napi.expand_commands (package_json, this.opts, commands);\n\n  // support for inheriting config env variables from npm\n  var npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(function (name) {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    var val = process.env[name];\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length);\n      // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n      if (name === 'argv') {\n         if (this.opts.argv &&\n             this.opts.argv.remain &&\n             this.opts.argv.remain.length) {\n            // do nothing\n         } else {\n            this.opts[name] = val;\n         }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  }, this);\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n  log.resume();\n};\n\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\nproto.usage = function usage () {\n  var str = [\n      '',\n      '  Usage: node-pre-gyp <command> [options]',\n      '',\n      '  where <command> is one of:',\n      commands.map(function (c) {\n        return '    - ' + c + ' - ' + require('./' + c).usage;\n      }).join('\\n'),\n      '',\n      'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'),\n      'node@' + process.versions.node\n  ].join('\\n');\n  return str;\n};\n\n/**\n * Version number getter.\n */\n\nObject.defineProperty(proto, 'version', {\n    get: function () {\n      return this.package.version;\n    },\n    enumerable: true\n});\n\n"]},"metadata":{},"sourceType":"script"}