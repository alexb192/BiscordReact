{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst os = require('os');\n\nconst processRelease = require('./process-release');\n\nconst win = process.platform === 'win32';\n\nconst findNodeDirectory = require('./find-node-directory');\n\nconst msgFormat = require('util').format;\n\nvar findPython = require('./find-python');\n\nif (win) {\n  var findVisualStudio = require('./find-visualstudio');\n}\n\nfunction configure(gyp, argv, callback) {\n  var python;\n  var buildDir = path.resolve('build');\n  var configNames = ['config.gypi', 'common.gypi'];\n  var configs = [];\n  var nodeDir;\n  var release = processRelease(argv, gyp, process.version, process.release);\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      } // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n\n\n      gyp.opts.ensure = !gyp.opts.tarball;\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    fs.mkdir(buildDir, {\n      recursive: true\n    }, function (err, isNew) {\n      if (err) {\n        return callback(err);\n      }\n\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew);\n\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version, createConfigFile);\n      } else {\n        createConfigFile();\n      }\n    });\n  }\n\n  function createConfigFile(err, vsInfo) {\n    if (err) {\n      return callback(err);\n    }\n\n    var configFilename = 'config.gypi';\n    var configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    var config = process.config || {};\n    var defaults = config.target_defaults;\n    var variables = config.variables; // default \"config.variables\"\n\n    if (!variables) {\n      variables = config.variables = {};\n    } // default \"config.defaults\"\n\n\n    if (!defaults) {\n      defaults = config.target_defaults = {};\n    } // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n\n\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = []; // set the default_configuration prop\n\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    } // set the target_arch variable\n\n\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n\n    if (variables.target_arch === 'arm64') {\n      defaults.msvs_configuration_platform = 'ARM64';\n    } // set the node development directory\n\n\n    variables.nodedir = nodeDir; // disable -T \"thin\" static archives by default\n\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015);\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path;\n      defaults.msbuild_toolset = vsInfo.toolset;\n\n      if (vsInfo.sdk) {\n        defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n      }\n\n      if (variables.target_arch === 'arm64') {\n        if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n          defaults.msvs_enable_marmasm = 1;\n        } else {\n          log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n        }\n      }\n\n      variables.msbuild_path = vsInfo.msBuild;\n    } // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n\n\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') {\n        return;\n      }\n\n      if (opt in gyp.configDefs) {\n        return;\n      }\n\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    }); // ensures that any boolean values from `process.config` get stringified\n\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') {\n        return String(v);\n      }\n\n      return v;\n    }\n\n    log.silly('build/' + configFilename, config); // now write out the config.gypi file to the build/ dir\n\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n    var json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    configs.push(configPath);\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs);\n  }\n\n  function findConfigs(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    var name = configNames.shift();\n\n    if (!name) {\n      return runGyp();\n    }\n\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n\n  function runGyp(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'make');\n      }\n    } // include all the \".gypi\" files that were found\n\n\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    }); // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n\n    var nodeExpFile;\n\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x';\n      var nodeRootDir = findNodeDirectory();\n      var candidates;\n\n      if (process.platform === 'aix') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n\n      var logprefix = 'find exports file';\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates);\n\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    } // this logic ported from the old `gyp_addon` python file\n\n\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi');\n      }\n\n      var outputDir = 'build';\n\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir;\n      }\n\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addonGypi);\n      argv.push('-I', commonGypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile);\n      }\n\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir); // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\');\n      }\n\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel'); // tell gyp to write the Makefile/Solution files into output_dir\n\n      argv.push('--generator-output', outputDir); // tell make to write its output into the same dir\n\n      argv.push('-Goutput_dir=.'); // enforce use of the \"binding.gyp\" file\n\n      argv.unshift('binding.gyp'); // execute `gyp` from the current target nodedir\n\n      argv.unshift(gypScript); // make sure python uses files that came with this particular node package\n\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n\n  function onCpExit(code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\n\n\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n\n  return undefined;\n}\n\nmodule.exports = configure;\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n};\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-gyp/lib/configure.js"],"names":["fs","require","path","log","os","processRelease","win","process","platform","findNodeDirectory","msgFormat","format","findPython","findVisualStudio","configure","gyp","argv","callback","python","buildDir","resolve","configNames","configs","nodeDir","release","version","opts","err","found","getNodeDir","env","PYTHON","nodedir","replace","homedir","verbose","createBuildDir","semver","Error","ensure","tarball","commands","install","versionDir","devDir","mkdir","recursive","isNew","msvs_version","createConfigFile","vsInfo","configFilename","configPath","config","defaults","target_defaults","variables","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","msvs_configuration_platform","standalone_static_library","thin","GYP_MSVS_VERSION","Math","min","versionYear","GYP_MSVS_OVERRIDE_PATH","msbuild_toolset","toolset","sdk","msvs_windows_target_platform_version","versionMajor","msvs_enable_marmasm","warn","msbuild_path","msBuild","Object","keys","forEach","opt","configDefs","boolsToString","k","v","String","silly","prefix","json","JSON","stringify","push","writeFile","join","findConfigs","name","shift","runGyp","fullPath","stat","code","indexOf","nodeExpFile","ext","nodeRootDir","candidates","map","file","logprefix","findAccessibleSync","undefined","msg","error","gypScript","__dirname","addonGypi","commonGypi","outputDir","nodeGypDir","nodeLibFile","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","cp","spawn","on","onCpExit","dir","next","length","candidate","fd","openSync","e","message","closeSync","module","exports","test","usage"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,GAAG,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAAjC;;AACA,MAAMC,iBAAiB,GAAGR,OAAO,CAAC,uBAAD,CAAjC;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,MAAD,CAAP,CAAgBU,MAAlC;;AACA,IAAIC,UAAU,GAAGX,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIK,GAAJ,EAAS;AACP,MAAIO,gBAAgB,GAAGZ,OAAO,CAAC,qBAAD,CAA9B;AACD;;AAED,SAASa,SAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyC;AACvC,MAAIC,MAAJ;AACA,MAAIC,QAAQ,GAAGjB,IAAI,CAACkB,OAAL,CAAa,OAAb,CAAf;AACA,MAAIC,WAAW,GAAG,CAAC,aAAD,EAAgB,aAAhB,CAAlB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAO,GAAGnB,cAAc,CAACW,IAAD,EAAOD,GAAP,EAAYR,OAAO,CAACkB,OAApB,EAA6BlB,OAAO,CAACiB,OAArC,CAA5B;AAEAZ,EAAAA,UAAU,CAACG,GAAG,CAACW,IAAJ,CAASR,MAAV,EAAkB,UAAUS,GAAV,EAAeC,KAAf,EAAsB;AAChD,QAAID,GAAJ,EAAS;AACPV,MAAAA,QAAQ,CAACU,GAAD,CAAR;AACD,KAFD,MAEO;AACLT,MAAAA,MAAM,GAAGU,KAAT;AACAC,MAAAA,UAAU;AACX;AACF,GAPS,CAAV;;AASA,WAASA,UAAT,GAAuB;AACrB;AACAtB,IAAAA,OAAO,CAACuB,GAAR,CAAYC,MAAZ,GAAqBb,MAArB;;AAEA,QAAIH,GAAG,CAACW,IAAJ,CAASM,OAAb,EAAsB;AACpB;AACAT,MAAAA,OAAO,GAAGR,GAAG,CAACW,IAAJ,CAASM,OAAT,CAAiBC,OAAjB,CAAyB,IAAzB,EAA+B7B,EAAE,CAAC8B,OAAH,EAA/B,CAAV;AAEA/B,MAAAA,GAAG,CAACgC,OAAJ,CAAY,cAAZ,EAA4B,qDAA5B,EAAmFZ,OAAnF;AACAa,MAAAA,cAAc;AACf,KAND,MAMO;AACL;AACA,UAAI,MAAMZ,OAAO,CAACC,OAAd,KAA0BlB,OAAO,CAACkB,OAAtC,EAA+C;AAC7C;AACAtB,QAAAA,GAAG,CAACgC,OAAJ,CAAY,cAAZ,EAA4B,6CAA5B,EAA2EX,OAAO,CAACC,OAAnF;AACD,OAHD,MAGO;AACL;AACAtB,QAAAA,GAAG,CAACgC,OAAJ,CAAY,cAAZ,EAA4B,sEAA5B,EAAoGX,OAAO,CAACC,OAA5G;AACD;;AAED,UAAI,CAACD,OAAO,CAACa,MAAb,EAAqB;AACnB;AACA,eAAOpB,QAAQ,CAAC,IAAIqB,KAAJ,CAAU,6BAA6Bd,OAAO,CAACC,OAA/C,CAAD,CAAf;AACD,OAbI,CAeL;AACA;;;AACAV,MAAAA,GAAG,CAACW,IAAJ,CAASa,MAAT,GAAkB,CAACxB,GAAG,CAACW,IAAJ,CAASc,OAA5B;AAEAzB,MAAAA,GAAG,CAAC0B,QAAJ,CAAaC,OAAb,CAAqB,CAAClB,OAAO,CAACC,OAAT,CAArB,EAAwC,UAAUE,GAAV,EAAe;AACrD,YAAIA,GAAJ,EAAS;AACP,iBAAOV,QAAQ,CAACU,GAAD,CAAf;AACD;;AACDxB,QAAAA,GAAG,CAACgC,OAAJ,CAAY,cAAZ,EAA4B,gCAA5B,EAA8DX,OAAO,CAACmB,UAAtE;AACApB,QAAAA,OAAO,GAAGrB,IAAI,CAACkB,OAAL,CAAaL,GAAG,CAAC6B,MAAjB,EAAyBpB,OAAO,CAACmB,UAAjC,CAAV;AACAP,QAAAA,cAAc;AACf,OAPD;AAQD;AACF;;AAED,WAASA,cAAT,GAA2B;AACzBjC,IAAAA,GAAG,CAACgC,OAAJ,CAAY,WAAZ,EAAyB,sCAAzB,EAAiEhB,QAAjE;AACAnB,IAAAA,EAAE,CAAC6C,KAAH,CAAS1B,QAAT,EAAmB;AAAE2B,MAAAA,SAAS,EAAE;AAAb,KAAnB,EAAwC,UAAUnB,GAAV,EAAeoB,KAAf,EAAsB;AAC5D,UAAIpB,GAAJ,EAAS;AACP,eAAOV,QAAQ,CAACU,GAAD,CAAf;AACD;;AACDxB,MAAAA,GAAG,CAACgC,OAAJ,CAAY,WAAZ,EAAyB,mCAAzB,EAA8DY,KAA9D;;AACA,UAAIzC,GAAJ,EAAS;AACPO,QAAAA,gBAAgB,CAACW,OAAO,CAACa,MAAT,EAAiBtB,GAAG,CAACW,IAAJ,CAASsB,YAA1B,EACdC,gBADc,CAAhB;AAED,OAHD,MAGO;AACLA,QAAAA,gBAAgB;AACjB;AACF,KAXD;AAYD;;AAED,WAASA,gBAAT,CAA2BtB,GAA3B,EAAgCuB,MAAhC,EAAwC;AACtC,QAAIvB,GAAJ,EAAS;AACP,aAAOV,QAAQ,CAACU,GAAD,CAAf;AACD;;AAED,QAAIwB,cAAc,GAAG,aAArB;AACA,QAAIC,UAAU,GAAGlD,IAAI,CAACkB,OAAL,CAAaD,QAAb,EAAuBgC,cAAvB,CAAjB;AAEAhD,IAAAA,GAAG,CAACgC,OAAJ,CAAY,WAAWgB,cAAvB,EAAuC,sBAAvC;AAEA,QAAIE,MAAM,GAAG9C,OAAO,CAAC8C,MAAR,IAAkB,EAA/B;AACA,QAAIC,QAAQ,GAAGD,MAAM,CAACE,eAAtB;AACA,QAAIC,SAAS,GAAGH,MAAM,CAACG,SAAvB,CAZsC,CActC;;AACA,QAAI,CAACA,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAGH,MAAM,CAACG,SAAP,GAAmB,EAA/B;AACD,KAjBqC,CAmBtC;;;AACA,QAAI,CAACF,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAGD,MAAM,CAACE,eAAP,GAAyB,EAApC;AACD,KAtBqC,CAwBtC;AACA;AACA;AACA;;;AACAD,IAAAA,QAAQ,CAACG,MAAT,GAAkB,EAAlB;AACAH,IAAAA,QAAQ,CAACI,OAAT,GAAmB,EAAnB;AACAJ,IAAAA,QAAQ,CAACK,YAAT,GAAwB,EAAxB;AACAL,IAAAA,QAAQ,CAACM,SAAT,GAAqB,EAArB,CA/BsC,CAiCtC;;AACA,QAAI,WAAW7C,GAAG,CAACW,IAAnB,EAAyB;AACvB4B,MAAAA,QAAQ,CAACO,qBAAT,GAAiC9C,GAAG,CAACW,IAAJ,CAASoC,KAAT,GAAiB,OAAjB,GAA2B,SAA5D;AACD;;AAED,QAAI,CAACR,QAAQ,CAACO,qBAAd,EAAqC;AACnCP,MAAAA,QAAQ,CAACO,qBAAT,GAAiC,SAAjC;AACD,KAxCqC,CA0CtC;;;AACAL,IAAAA,SAAS,CAACO,WAAV,GAAwBhD,GAAG,CAACW,IAAJ,CAASsC,IAAT,IAAiBzD,OAAO,CAACyD,IAAzB,IAAiC,MAAzD;;AACA,QAAIR,SAAS,CAACO,WAAV,KAA0B,OAA9B,EAAuC;AACrCT,MAAAA,QAAQ,CAACW,2BAAT,GAAuC,OAAvC;AACD,KA9CqC,CAgDtC;;;AACAT,IAAAA,SAAS,CAACxB,OAAV,GAAoBT,OAApB,CAjDsC,CAmDtC;;AACAiC,IAAAA,SAAS,CAACU,yBAAV,GAAsCnD,GAAG,CAACW,IAAJ,CAASyC,IAAT,GAAgB,CAAhB,GAAoB,CAA1D;;AAEA,QAAI7D,GAAJ,EAAS;AACPC,MAAAA,OAAO,CAACuB,GAAR,CAAYsC,gBAAZ,GAA+BC,IAAI,CAACC,GAAL,CAASpB,MAAM,CAACqB,WAAhB,EAA6B,IAA7B,CAA/B;AACAhE,MAAAA,OAAO,CAACuB,GAAR,CAAY0C,sBAAZ,GAAqCtB,MAAM,CAAChD,IAA5C;AACAoD,MAAAA,QAAQ,CAACmB,eAAT,GAA2BvB,MAAM,CAACwB,OAAlC;;AACA,UAAIxB,MAAM,CAACyB,GAAX,EAAgB;AACdrB,QAAAA,QAAQ,CAACsB,oCAAT,GAAgD1B,MAAM,CAACyB,GAAvD;AACD;;AACD,UAAInB,SAAS,CAACO,WAAV,KAA0B,OAA9B,EAAuC;AACrC,YAAIb,MAAM,CAAC2B,YAAP,GAAsB,EAAtB,IACC3B,MAAM,CAAC2B,YAAP,KAAwB,EAAxB,IAA8B3B,MAAM,CAAC2B,YAAP,IAAuB,CAD1D,EAC8D;AAC5DvB,UAAAA,QAAQ,CAACwB,mBAAT,GAA+B,CAA/B;AACD,SAHD,MAGO;AACL3E,UAAAA,GAAG,CAAC4E,IAAJ,CAAS,oDACP,2CADF;AAED;AACF;;AACDvB,MAAAA,SAAS,CAACwB,YAAV,GAAyB9B,MAAM,CAAC+B,OAAhC;AACD,KAvEqC,CAyEtC;AACA;AACA;AACA;;;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYpE,GAAG,CAACW,IAAhB,EAAsB0D,OAAtB,CAA8B,UAAUC,GAAV,EAAe;AAC3C,UAAIA,GAAG,KAAK,MAAZ,EAAoB;AAClB;AACD;;AACD,UAAIA,GAAG,IAAItE,GAAG,CAACuE,UAAf,EAA2B;AACzB;AACD;;AACD9B,MAAAA,SAAS,CAAC6B,GAAG,CAACpD,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAD,CAAT,GAAoClB,GAAG,CAACW,IAAJ,CAAS2D,GAAT,CAApC;AACD,KARD,EA7EsC,CAuFtC;;AACA,aAASE,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,UAAI,OAAOA,CAAP,KAAa,SAAjB,EAA4B;AAC1B,eAAOC,MAAM,CAACD,CAAD,CAAb;AACD;;AACD,aAAOA,CAAP;AACD;;AAEDtF,IAAAA,GAAG,CAACwF,KAAJ,CAAU,WAAWxC,cAArB,EAAqCE,MAArC,EA/FsC,CAiGtC;;AACA,QAAIuC,MAAM,GAAG,mEAAb;AAEA,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe1C,MAAf,EAAuBkC,aAAvB,EAAsC,CAAtC,CAAX;AACApF,IAAAA,GAAG,CAACgC,OAAJ,CAAY,WAAWgB,cAAvB,EAAuC,6BAAvC,EAAsEC,UAAtE;AACA9B,IAAAA,OAAO,CAAC0E,IAAR,CAAa5C,UAAb;AACApD,IAAAA,EAAE,CAACiG,SAAH,CAAa7C,UAAb,EAAyB,CAACwC,MAAD,EAASC,IAAT,EAAe,EAAf,EAAmBK,IAAnB,CAAwB,IAAxB,CAAzB,EAAwDC,WAAxD;AACD;;AAED,WAASA,WAAT,CAAsBxE,GAAtB,EAA2B;AACzB,QAAIA,GAAJ,EAAS;AACP,aAAOV,QAAQ,CAACU,GAAD,CAAf;AACD;;AAED,QAAIyE,IAAI,GAAG/E,WAAW,CAACgF,KAAZ,EAAX;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,aAAOE,MAAM,EAAb;AACD;;AACD,QAAIC,QAAQ,GAAGrG,IAAI,CAACkB,OAAL,CAAagF,IAAb,CAAf;AAEAjG,IAAAA,GAAG,CAACgC,OAAJ,CAAYiE,IAAZ,EAAkB,4BAAlB,EAAgDG,QAAhD;AACAvG,IAAAA,EAAE,CAACwG,IAAH,CAAQD,QAAR,EAAkB,UAAU5E,GAAV,EAAe;AAC/B,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAAC8E,IAAJ,KAAa,QAAjB,EAA2B;AACzBN,UAAAA,WAAW,GADc,CACX;AACf,SAFD,MAEO;AACLlF,UAAAA,QAAQ,CAACU,GAAD,CAAR;AACD;AACF,OAND,MAMO;AACLxB,QAAAA,GAAG,CAACgC,OAAJ,CAAYiE,IAAZ,EAAkB,iBAAlB;AACA9E,QAAAA,OAAO,CAAC0E,IAAR,CAAaO,QAAb;AACAJ,QAAAA,WAAW;AACZ;AACF,KAZD;AAaD;;AAED,WAASG,MAAT,CAAiB3E,GAAjB,EAAsB;AACpB,QAAIA,GAAJ,EAAS;AACP,aAAOV,QAAQ,CAACU,GAAD,CAAf;AACD;;AAED,QAAI,CAAC,CAACX,IAAI,CAAC0F,OAAL,CAAa,IAAb,CAAF,IAAwB,CAAC,CAAC1F,IAAI,CAAC0F,OAAL,CAAa,UAAb,CAA9B,EAAwD;AACtD,UAAIpG,GAAJ,EAAS;AACPH,QAAAA,GAAG,CAACgC,OAAJ,CAAY,KAAZ,EAAmB,8CAAnB,EADO,CAEP;;AACAnB,QAAAA,IAAI,CAACgF,IAAL,CAAU,IAAV,EAAgB,MAAhB;AACD,OAJD,MAIO;AACL7F,QAAAA,GAAG,CAACgC,OAAJ,CAAY,KAAZ,EAAmB,8CAAnB,EADK,CAEL;;AACAnB,QAAAA,IAAI,CAACgF,IAAL,CAAU,IAAV,EAAgB,MAAhB;AACD;AACF,KAfmB,CAiBpB;;;AACA1E,IAAAA,OAAO,CAAC8D,OAAR,CAAgB,UAAU/B,MAAV,EAAkB;AAChCrC,MAAAA,IAAI,CAACgF,IAAL,CAAU,IAAV,EAAgB3C,MAAhB;AACD,KAFD,EAlBoB,CAsBpB;AACA;;AACA,QAAIsD,WAAJ;;AACA,QAAIpG,OAAO,CAACC,QAAR,KAAqB,KAArB,IAA8BD,OAAO,CAACC,QAAR,KAAqB,OAAvD,EAAgE;AAC9D,UAAIoG,GAAG,GAAGrG,OAAO,CAACC,QAAR,KAAqB,KAArB,GAA6B,KAA7B,GAAqC,GAA/C;AACA,UAAIqG,WAAW,GAAGpG,iBAAiB,EAAnC;AACA,UAAIqG,UAAJ;;AAEA,UAAIvG,OAAO,CAACC,QAAR,KAAqB,KAAzB,EAAgC;AAC9BsG,QAAAA,UAAU,GAAG,CACX,mBADW,EAEX,kBAFW,EAGX,gBAHW,EAIX,MAJW,EAKXC,GALW,CAKP,UAAUC,IAAV,EAAgB;AACpB,iBAAOA,IAAI,GAAG,GAAP,GAAaJ,GAApB;AACD,SAPY,CAAb;AAQD,OATD,MASO;AACLE,QAAAA,UAAU,GAAG,CACX,gCADW,EAEX,8BAFW,EAGX,aAHW,EAIXC,GAJW,CAIP,UAAUC,IAAV,EAAgB;AACpB,iBAAOA,IAAI,GAAG,GAAP,GAAaJ,GAApB;AACD,SANY,CAAb;AAOD;;AAED,UAAIK,SAAS,GAAG,mBAAhB;AACAN,MAAAA,WAAW,GAAGO,kBAAkB,CAACD,SAAD,EAAYJ,WAAZ,EAAyBC,UAAzB,CAAhC;;AACA,UAAIH,WAAW,KAAKQ,SAApB,EAA+B;AAC7BhH,QAAAA,GAAG,CAACgC,OAAJ,CAAY8E,SAAZ,EAAuB,wBAAvB,EAAiDN,WAAjD;AACD,OAFD,MAEO;AACL,YAAIS,GAAG,GAAG1G,SAAS,CAAC,mCAAD,EAAsCkG,GAAtC,EAA2CC,WAA3C,CAAnB;AACA1G,QAAAA,GAAG,CAACkH,KAAJ,CAAUJ,SAAV,EAAqB,6BAArB;AACA,eAAOhG,QAAQ,CAAC,IAAIqB,KAAJ,CAAU8E,GAAV,CAAD,CAAf;AACD;AACF,KA1DmB,CA4DpB;;;AACA,QAAIE,SAAS,GAAGpH,IAAI,CAACkB,OAAL,CAAamG,SAAb,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,CAAhB;AACA,QAAIC,SAAS,GAAGtH,IAAI,CAACkB,OAAL,CAAamG,SAAb,EAAwB,IAAxB,EAA8B,YAA9B,CAAhB;AACA,QAAIE,UAAU,GAAGvH,IAAI,CAACkB,OAAL,CAAaG,OAAb,EAAsB,0BAAtB,CAAjB;AACAvB,IAAAA,EAAE,CAACwG,IAAH,CAAQiB,UAAR,EAAoB,UAAU9F,GAAV,EAAe;AACjC,UAAIA,GAAJ,EAAS;AACP8F,QAAAA,UAAU,GAAGvH,IAAI,CAACkB,OAAL,CAAaG,OAAb,EAAsB,aAAtB,CAAb;AACD;;AAED,UAAImG,SAAS,GAAG,OAAhB;;AACA,UAAIpH,GAAJ,EAAS;AACP;AACAoH,QAAAA,SAAS,GAAGvG,QAAZ;AACD;;AACD,UAAIwG,UAAU,GAAGzH,IAAI,CAACkB,OAAL,CAAamG,SAAb,EAAwB,IAAxB,CAAjB;AAEA,UAAIK,WAAW,GAAG1H,IAAI,CAACgG,IAAL,CAAU3E,OAAV,EAChB,CAACR,GAAG,CAACW,IAAJ,CAASM,OAAV,GAAoB,gBAApB,GAAuC,kBADvB,EAEhBR,OAAO,CAAC4E,IAAR,GAAe,MAFC,CAAlB;AAIApF,MAAAA,IAAI,CAACgF,IAAL,CAAU,IAAV,EAAgBwB,SAAhB;AACAxG,MAAAA,IAAI,CAACgF,IAAL,CAAU,IAAV,EAAgByB,UAAhB;AACAzG,MAAAA,IAAI,CAACgF,IAAL,CAAU,0BAAV;AACAhF,MAAAA,IAAI,CAACgF,IAAL,CAAU,sBAAV;AACAhF,MAAAA,IAAI,CAACgF,IAAL,CAAU,qBAAqBzE,OAA/B;;AACA,UAAIhB,OAAO,CAACC,QAAR,KAAqB,KAArB,IAA8BD,OAAO,CAACC,QAAR,KAAqB,OAAvD,EAAgE;AAC9DQ,QAAAA,IAAI,CAACgF,IAAL,CAAU,qBAAqBW,WAA/B;AACD;;AACD3F,MAAAA,IAAI,CAACgF,IAAL,CAAU,oBAAoB2B,UAA9B,EAxBiC,CA0BjC;AACA;;AACA,UAAIrH,GAAJ,EAAS;AACPsH,QAAAA,WAAW,GAAGA,WAAW,CAAC3F,OAAZ,CAAoB,KAApB,EAA2B,MAA3B,CAAd;AACD;;AACDjB,MAAAA,IAAI,CAACgF,IAAL,CAAU,qBAAqB4B,WAA/B;AACA5G,MAAAA,IAAI,CAACgF,IAAL,CAAU,uBAAuBzF,OAAO,CAACsH,GAAR,EAAjC;AACA7G,MAAAA,IAAI,CAACgF,IAAL,CAAU,oBACPjF,GAAG,CAACW,IAAJ,CAASoG,WAAT,IAAwBvH,OAAO,CAACwH,QAAhC,IAA4C,IADrC,CAAV;AAEA/G,MAAAA,IAAI,CAACgF,IAAL,CAAU,WAAV;AACAhF,MAAAA,IAAI,CAACgF,IAAL,CAAU,eAAV,EApCiC,CAsCjC;;AACAhF,MAAAA,IAAI,CAACgF,IAAL,CAAU,oBAAV,EAAgC0B,SAAhC,EAvCiC,CAyCjC;;AACA1G,MAAAA,IAAI,CAACgF,IAAL,CAAU,gBAAV,EA1CiC,CA4CjC;;AACAhF,MAAAA,IAAI,CAACgH,OAAL,CAAa,aAAb,EA7CiC,CA+CjC;;AACAhH,MAAAA,IAAI,CAACgH,OAAL,CAAaV,SAAb,EAhDiC,CAkDjC;;AACA,UAAIW,MAAM,GAAG,CAAC/H,IAAI,CAACgG,IAAL,CAAUqB,SAAV,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,OAAlC,CAAD,CAAb;;AACA,UAAIhH,OAAO,CAACuB,GAAR,CAAYoG,UAAhB,EAA4B;AAC1BD,QAAAA,MAAM,CAACjC,IAAP,CAAYzF,OAAO,CAACuB,GAAR,CAAYoG,UAAxB;AACD;;AACD3H,MAAAA,OAAO,CAACuB,GAAR,CAAYoG,UAAZ,GAAyBD,MAAM,CAAC/B,IAAP,CAAY5F,GAAG,GAAG,GAAH,GAAS,GAAxB,CAAzB;AAEA,UAAI6H,EAAE,GAAGpH,GAAG,CAACqH,KAAJ,CAAUlH,MAAV,EAAkBF,IAAlB,CAAT;AACAmH,MAAAA,EAAE,CAACE,EAAH,CAAM,MAAN,EAAcC,QAAd;AACD,KA3DD;AA4DD;;AAED,WAASA,QAAT,CAAmB7B,IAAnB,EAAyB;AACvB,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACdxF,MAAAA,QAAQ,CAAC,IAAIqB,KAAJ,CAAU,kCAAkCmE,IAA5C,CAAD,CAAR;AACD,KAFD,MAEO;AACL;AACAxF,MAAAA,QAAQ;AACT;AACF;AACF;AAED;;;;;;;AAKA,SAASiG,kBAAT,CAA6BD,SAA7B,EAAwCsB,GAAxC,EAA6CzB,UAA7C,EAAyD;AACvD,OAAK,IAAI0B,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG1B,UAAU,CAAC2B,MAArC,EAA6CD,IAAI,EAAjD,EAAqD;AACnD,QAAIE,SAAS,GAAGxI,IAAI,CAACkB,OAAL,CAAamH,GAAb,EAAkBzB,UAAU,CAAC0B,IAAD,CAA5B,CAAhB;;AACA,QAAI;AACF,UAAIG,EAAE,GAAG3I,EAAE,CAAC4I,QAAH,CAAYF,SAAZ,EAAuB,GAAvB,CAAT;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV;AACA1I,MAAAA,GAAG,CAACwF,KAAJ,CAAUsB,SAAV,EAAqB,uBAArB,EAA8CyB,SAA9C,EAAyDG,CAAC,CAACC,OAA3D;AACA;AACD;;AACD9I,IAAAA,EAAE,CAAC+I,SAAH,CAAaJ,EAAb;AACAxI,IAAAA,GAAG,CAACwF,KAAJ,CAAUsB,SAAV,EAAqB,mBAArB,EAA0CyB,SAA1C;AACA,WAAOA,SAAP;AACD;;AAED,SAAOvB,SAAP;AACD;;AAED6B,MAAM,CAACC,OAAP,GAAiBnI,SAAjB;AACAkI,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsB;AACpBhC,EAAAA,kBAAkB,EAAEA;AADA,CAAtB;AAGA8B,MAAM,CAACC,OAAP,CAAeE,KAAf,GAAuB,gBAAgB7I,GAAG,GAAG,oBAAH,GAA0B,YAA7C,IAA6D,yBAApF","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst log = require('npmlog')\nconst os = require('os')\nconst processRelease = require('./process-release')\nconst win = process.platform === 'win32'\nconst findNodeDirectory = require('./find-node-directory')\nconst msgFormat = require('util').format\nvar findPython = require('./find-python')\nif (win) {\n  var findVisualStudio = require('./find-visualstudio')\n}\n\nfunction configure (gyp, argv, callback) {\n  var python\n  var buildDir = path.resolve('build')\n  var configNames = ['config.gypi', 'common.gypi']\n  var configs = []\n  var nodeDir\n  var release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball\n\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err)\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    fs.mkdir(buildDir, { recursive: true }, function (err, isNew) {\n      if (err) {\n        return callback(err)\n      }\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew)\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version,\n          createConfigFile)\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n\n  function createConfigFile (err, vsInfo) {\n    if (err) {\n      return callback(err)\n    }\n\n    var configFilename = 'config.gypi'\n    var configPath = path.resolve(buildDir, configFilename)\n\n    log.verbose('build/' + configFilename, 'creating config file')\n\n    var config = process.config || {}\n    var defaults = config.target_defaults\n    var variables = config.variables\n\n    // default \"config.variables\"\n    if (!variables) {\n      variables = config.variables = {}\n    }\n\n    // default \"config.defaults\"\n    if (!defaults) {\n      defaults = config.target_defaults = {}\n    }\n\n    // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n    defaults.cflags = []\n    defaults.defines = []\n    defaults.include_dirs = []\n    defaults.libraries = []\n\n    // set the default_configuration prop\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n    }\n\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release'\n    }\n\n    // set the target_arch variable\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n    if (variables.target_arch === 'arm64') {\n      defaults.msvs_configuration_platform = 'ARM64'\n    }\n\n    // set the node development directory\n    variables.nodedir = nodeDir\n\n    // disable -T \"thin\" static archives by default\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n    if (win) {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n      defaults.msbuild_toolset = vsInfo.toolset\n      if (vsInfo.sdk) {\n        defaults.msvs_windows_target_platform_version = vsInfo.sdk\n      }\n      if (variables.target_arch === 'arm64') {\n        if (vsInfo.versionMajor > 15 ||\n            (vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9)) {\n          defaults.msvs_enable_marmasm = 1\n        } else {\n          log.warn('Compiling ARM64 assembly is only available in\\n' +\n            'Visual Studio 2017 version 15.9 and above')\n        }\n      }\n      variables.msbuild_path = vsInfo.msBuild\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') {\n        return\n      }\n      if (opt in gyp.configDefs) {\n        return\n      }\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n    })\n\n    // ensures that any boolean values from `process.config` get stringified\n    function boolsToString (k, v) {\n      if (typeof v === 'boolean') {\n        return String(v)\n      }\n      return v\n    }\n\n    log.silly('build/' + configFilename, config)\n\n    // now write out the config.gypi file to the build/ dir\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n\n    var json = JSON.stringify(config, boolsToString, 2)\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n    configs.push(configPath)\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs)\n  }\n\n  function findConfigs (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    var name = configNames.shift()\n    if (!name) {\n      return runGyp()\n    }\n    var fullPath = path.resolve(name)\n\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var nodeRootDir = findNodeDirectory()\n      var candidates\n\n      if (process.platform === 'aix') {\n        candidates = [\n          'include/node/node',\n          'out/Release/node',\n          'out/Debug/node',\n          'node'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      } else {\n        candidates = [\n          'out/Release/obj.target/libnode',\n          'out/Debug/obj.target/libnode',\n          'lib/libnode'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      }\n\n      var logprefix = 'find exports file'\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates)\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi')\n      }\n\n      var outputDir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addonGypi)\n      argv.push('-I', commonGypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  function onCpExit (code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next])\n    try {\n      var fd = fs.openSync(candidate, 'r')\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n      continue\n    }\n    fs.closeSync(fd)\n    log.silly(logprefix, 'Found readable %s', candidate)\n    return candidate\n  }\n\n  return undefined\n}\n\nmodule.exports = configure\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n}\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n"]},"metadata":{},"sourceType":"script"}