{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = rebuild;\nexports.usage = 'Runs \"clean\" and \"install\" at once';\n\nvar fs = require('fs');\n\nvar napi = require('./util/napi.js');\n\nfunction rebuild(gyp, argv, callback) {\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var installArgs = [];\n  var napi_build_version = napi.get_best_napi_build_version(package_json, gyp.opts);\n  if (napi_build_version != null) installArgs = [napi.get_command_arg(napi_build_version)];\n  gyp.todo.unshift({\n    name: 'clean',\n    args: []\n  }, {\n    name: 'install',\n    args: installArgs\n  });\n  process.nextTick(callback);\n}","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/node-pre-gyp/lib/reinstall.js"],"names":["module","exports","rebuild","usage","fs","require","napi","gyp","argv","callback","package_json","JSON","parse","readFileSync","installArgs","napi_build_version","get_best_napi_build_version","opts","get_command_arg","todo","unshift","name","args","process","nextTick"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,OAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,oCAAhB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAAlB;;AAEA,SAASH,OAAT,CAAkBK,GAAlB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACrC,MAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWR,EAAE,CAACS,YAAH,CAAgB,gBAAhB,CAAX,CAAnB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,kBAAkB,GAAGT,IAAI,CAACU,2BAAL,CAAiCN,YAAjC,EAA+CH,GAAG,CAACU,IAAnD,CAAzB;AACA,MAAIF,kBAAkB,IAAI,IAA1B,EAAgCD,WAAW,GAAG,CAAER,IAAI,CAACY,eAAL,CAAsBH,kBAAtB,CAAF,CAAd;AAChCR,EAAAA,GAAG,CAACY,IAAJ,CAASC,OAAT,CACI;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GADJ,EAEI;AAAED,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,IAAI,EAAER;AAAzB,GAFJ;AAIAS,EAAAA,OAAO,CAACC,QAAR,CAAiBf,QAAjB;AACD","sourcesContent":["\"use strict\";\n\nmodule.exports = exports = rebuild;\n\nexports.usage = 'Runs \"clean\" and \"install\" at once';\n\nvar fs = require('fs');\nvar napi = require('./util/napi.js');\n\nfunction rebuild (gyp, argv, callback) {\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var installArgs = [];\n  var napi_build_version = napi.get_best_napi_build_version(package_json, gyp.opts);\n  if (napi_build_version != null) installArgs = [ napi.get_command_arg (napi_build_version) ];\n  gyp.todo.unshift(\n      { name: 'clean', args: [] },\n      { name: 'install', args: installArgs }\n  );\n  process.nextTick(callback);\n}\n"]},"metadata":{},"sourceType":"script"}