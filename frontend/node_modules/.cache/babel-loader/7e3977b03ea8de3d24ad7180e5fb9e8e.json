{"ast":null,"code":"'use strict'; // Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\n\nconst bundleWalk = require('npm-bundled');\n\nconst BundleWalker = bundleWalk.BundleWalker;\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync;\n\nconst ignoreWalk = require('ignore-walk');\n\nconst IgnoreWalker = ignoreWalk.Walker;\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync;\nconst rootBuiltinRules = Symbol('root-builtin-rules');\nconst packageNecessaryRules = Symbol('package-necessary-rules');\n\nconst path = require('path');\n\nconst normalizePackageBin = require('npm-normalize-package-bin');\n\nconst defaultRules = ['.npmignore', '.gitignore', '**/.git', '**/.svn', '**/.hg', '**/CVS', '**/.git/**', '**/.svn/**', '**/.hg/**', '**/CVS/**', '/.lock-wscript', '/.wafpickle-*', '/build/config.gypi', 'npm-debug.log', '**/.npmrc', '.*.swp', '.DS_Store', '**/.DS_Store/**', '._*', '**/._*/**', '*.orig', '/package-lock.json', '/yarn.lock', 'archived-packages/**', 'core', '!core/', '!**/core/', '*.core', '*.vgcore', 'vgcore.*', 'core.+([0-9])']; // There may be others, but :?|<> are handled by node-tar\n\nconst nameIsBadForWindows = file => /\\*/.test(file); // a decorator that applies our custom rules to an ignore walker\n\n\nconst npmWalker = Class => class Walker extends Class {\n  constructor(opt) {\n    opt = opt || {}; // the order in which rules are applied.\n\n    opt.ignoreFiles = [rootBuiltinRules, 'package.json', '.npmignore', '.gitignore', packageNecessaryRules];\n    opt.includeEmpty = false;\n    opt.path = opt.path || process.cwd();\n    const dirName = path.basename(opt.path);\n    const parentName = path.basename(path.dirname(opt.path));\n    opt.follow = dirName === 'node_modules' || parentName === 'node_modules' && /^@/.test(dirName);\n    super(opt); // ignore a bunch of things by default at the root level.\n    // also ignore anything in node_modules, except bundled dependencies\n\n    if (!this.parent) {\n      this.bundled = opt.bundled || [];\n      this.bundledScopes = Array.from(new Set(this.bundled.filter(f => /^@/.test(f)).map(f => f.split('/')[0])));\n      const rules = defaultRules.join('\\n') + '\\n';\n      this.packageJsonCache = opt.packageJsonCache || new Map();\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _ => _);\n    } else {\n      this.bundled = [];\n      this.bundledScopes = [];\n      this.packageJsonCache = this.parent.packageJsonCache;\n    }\n  }\n\n  onReaddir(entries) {\n    if (!this.parent) {\n      entries = entries.filter(e => e !== '.git' && !(e === 'node_modules' && this.bundled.length === 0));\n    }\n\n    return super.onReaddir(entries);\n  }\n\n  filterEntry(entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1);\n    const pkgre = /^node_modules\\/(@[^\\/]+\\/?[^\\/]+|[^\\/]+)(\\/.*)?$/;\n    const isRoot = !this.parent;\n    const pkg = isRoot && pkgre.test(entry) ? entry.replace(pkgre, '$1') : null;\n    const rootNM = isRoot && entry === 'node_modules';\n    const rootPJ = isRoot && entry === 'package.json';\n    return (// if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) ? this.parent.filterEntry(this.basename + '/' + entry, partial) // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? -1 !== this.bundled.indexOf(pkg) || -1 !== this.bundledScopes.indexOf(pkg) // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length // always include package.json at the root.\n      : rootPJ ? true // otherwise, follow ignore-walk's logic\n      : super.filterEntry(entry, partial)\n    );\n  }\n\n  filterEntries() {\n    if (this.ignoreRules['package.json']) this.ignoreRules['.gitignore'] = this.ignoreRules['.npmignore'] = null;else if (this.ignoreRules['.npmignore']) this.ignoreRules['.gitignore'] = null;\n    this.filterEntries = super.filterEntries;\n    super.filterEntries();\n  }\n\n  addIgnoreFile(file, then) {\n    const ig = path.resolve(this.path, file);\n    if (this.packageJsonCache.has(ig)) this.onPackageJson(ig, this.packageJsonCache.get(ig), then);else super.addIgnoreFile(file, then);\n  }\n\n  onPackageJson(ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg); // if there's a bin, browser or main, make sure we don't ignore it\n    // also, don't ignore the package.json itself!\n    //\n    // Weird side-effect of this: a readme (etc) file will be included\n    // if it exists anywhere within a folder with a package.json file.\n    // The original intent was only to include these files in the root,\n    // but now users in the wild are dependent on that behavior for\n    // localized documentation and other use cases.  Adding a `/` to\n    // these rules, while tempting and arguably more \"correct\", is a\n    // breaking change.\n\n    const rules = [pkg.browser ? '!' + pkg.browser : '', pkg.main ? '!' + pkg.main : '', '!package.json', '!npm-shrinkwrap.json', '!@(readme|copying|license|licence|notice|changes|changelog|history){,.*[^~$]}'];\n\n    if (pkg.bin) {\n      // always an object, because normalized already\n      for (const key in pkg.bin) rules.push('!' + pkg.bin[key]);\n    }\n\n    const data = rules.filter(f => f).join('\\n') + '\\n';\n    super.onReadIgnoreFile(packageNecessaryRules, data, _ => _);\n    if (Array.isArray(pkg.files)) super.onReadIgnoreFile('package.json', '*\\n' + pkg.files.map(f => '!' + f + '\\n!' + f.replace(/\\/+$/, '') + '/**').join('\\n') + '\\n', then);else then();\n  } // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n\n\n  stat(entry, file, dir, then) {\n    if (nameIsBadForWindows(entry)) then();else super.stat(entry, file, dir, then);\n  } // override parent onstat function to nix all symlinks\n\n\n  onstat(st, entry, file, dir, then) {\n    if (st.isSymbolicLink()) then();else super.onstat(st, entry, file, dir, then);\n  }\n\n  onReadIgnoreFile(file, data, then) {\n    if (file === 'package.json') try {\n      const ig = path.resolve(this.path, file);\n      this.onPackageJson(ig, normalizePackageBin(JSON.parse(data)), then);\n    } catch (er) {\n      // ignore package.json files that are not json\n      then();\n    } else super.onReadIgnoreFile(file, data, then);\n  }\n\n  sort(a, b) {\n    return sort(a, b);\n  }\n\n};\n\nclass Walker extends npmWalker(IgnoreWalker) {\n  walker(entry, then) {\n    new Walker(this.walkerOpt(entry)).on('done', then).start();\n  }\n\n}\n\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  walker(entry, then) {\n    new WalkerSync(this.walkerOpt(entry)).start();\n    then();\n  }\n\n}\n\nconst walk = (options, callback) => {\n  options = options || {};\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options);\n    bw.on('done', bundled => {\n      options.bundled = bundled;\n      options.packageJsonCache = bw.packageJsonCache;\n      new Walker(options).on('done', resolve).on('error', reject).start();\n    });\n    bw.start();\n  });\n  return callback ? p.then(res => callback(null, res), callback) : p;\n};\n\nconst walkSync = options => {\n  options = options || {};\n  const bw = new BundleWalkerSync(options).start();\n  options.bundled = bw.result;\n  options.packageJsonCache = bw.packageJsonCache;\n  const walker = new WalkerSync(options);\n  walker.start();\n  return walker.result;\n}; // optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\n\n\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase();\n  const extb = path.extname(b).toLowerCase();\n  const basea = path.basename(a).toLowerCase();\n  const baseb = path.basename(b).toLowerCase();\n  return exta.localeCompare(extb) || basea.localeCompare(baseb) || a.localeCompare(b);\n};\n\nmodule.exports = walk;\nwalk.sync = walkSync;\nwalk.Walker = Walker;\nwalk.WalkerSync = WalkerSync;","map":{"version":3,"sources":["/home/n/React/loginpagedemo/frontend/node_modules/npm-packlist/index.js"],"names":["bundleWalk","require","BundleWalker","BundleWalkerSync","ignoreWalk","IgnoreWalker","Walker","IgnoreWalkerSync","WalkerSync","rootBuiltinRules","Symbol","packageNecessaryRules","path","normalizePackageBin","defaultRules","nameIsBadForWindows","file","test","npmWalker","Class","constructor","opt","ignoreFiles","includeEmpty","process","cwd","dirName","basename","parentName","dirname","follow","parent","bundled","bundledScopes","Array","from","Set","filter","f","map","split","rules","join","packageJsonCache","Map","onReadIgnoreFile","_","onReaddir","entries","e","length","filterEntry","entry","partial","p","substr","root","pkgre","isRoot","pkg","replace","rootNM","rootPJ","indexOf","filterEntries","ignoreRules","addIgnoreFile","then","ig","resolve","has","onPackageJson","get","set","browser","main","bin","key","push","data","isArray","files","stat","dir","onstat","st","isSymbolicLink","JSON","parse","er","sort","a","b","walker","walkerOpt","on","start","walk","options","callback","Promise","reject","bw","res","walkSync","result","exta","extname","toLowerCase","extb","basea","baseb","localeCompare","module","exports","sync"],"mappings":"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","sourcesContent":["'use strict'\n\n// Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\n\nconst bundleWalk = require('npm-bundled')\nconst BundleWalker = bundleWalk.BundleWalker\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync\n\nconst ignoreWalk = require('ignore-walk')\nconst IgnoreWalker = ignoreWalk.Walker\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync\n\nconst rootBuiltinRules = Symbol('root-builtin-rules')\nconst packageNecessaryRules = Symbol('package-necessary-rules')\nconst path = require('path')\n\nconst normalizePackageBin = require('npm-normalize-package-bin')\n\nconst defaultRules = [\n  '.npmignore',\n  '.gitignore',\n  '**/.git',\n  '**/.svn',\n  '**/.hg',\n  '**/CVS',\n  '**/.git/**',\n  '**/.svn/**',\n  '**/.hg/**',\n  '**/CVS/**',\n  '/.lock-wscript',\n  '/.wafpickle-*',\n  '/build/config.gypi',\n  'npm-debug.log',\n  '**/.npmrc',\n  '.*.swp',\n  '.DS_Store',\n  '**/.DS_Store/**',\n  '._*',\n  '**/._*/**',\n  '*.orig',\n  '/package-lock.json',\n  '/yarn.lock',\n  'archived-packages/**',\n  'core',\n  '!core/',\n  '!**/core/',\n  '*.core',\n  '*.vgcore',\n  'vgcore.*',\n  'core.+([0-9])',\n]\n\n// There may be others, but :?|<> are handled by node-tar\nconst nameIsBadForWindows = file => /\\*/.test(file)\n\n// a decorator that applies our custom rules to an ignore walker\nconst npmWalker = Class => class Walker extends Class {\n  constructor (opt) {\n    opt = opt || {}\n\n    // the order in which rules are applied.\n    opt.ignoreFiles = [\n      rootBuiltinRules,\n      'package.json',\n      '.npmignore',\n      '.gitignore',\n      packageNecessaryRules\n    ]\n\n    opt.includeEmpty = false\n    opt.path = opt.path || process.cwd()\n    const dirName = path.basename(opt.path)\n    const parentName = path.basename(path.dirname(opt.path))\n    opt.follow =\n      dirName === 'node_modules' ||\n      (parentName === 'node_modules' && /^@/.test(dirName))\n    super(opt)\n\n    // ignore a bunch of things by default at the root level.\n    // also ignore anything in node_modules, except bundled dependencies\n    if (!this.parent) {\n      this.bundled = opt.bundled || []\n      this.bundledScopes = Array.from(new Set(\n        this.bundled.filter(f => /^@/.test(f))\n        .map(f => f.split('/')[0])))\n      const rules = defaultRules.join('\\n') + '\\n'\n      this.packageJsonCache = opt.packageJsonCache || new Map()\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _=>_)\n    } else {\n      this.bundled = []\n      this.bundledScopes = []\n      this.packageJsonCache = this.parent.packageJsonCache\n    }\n  }\n\n  onReaddir (entries) {\n    if (!this.parent) {\n      entries = entries.filter(e =>\n        e !== '.git' &&\n        !(e === 'node_modules' && this.bundled.length === 0)\n      )\n    }\n    return super.onReaddir(entries)\n  }\n\n  filterEntry (entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1)\n    const pkgre = /^node_modules\\/(@[^\\/]+\\/?[^\\/]+|[^\\/]+)(\\/.*)?$/\n    const isRoot = !this.parent\n    const pkg = isRoot && pkgre.test(entry) ?\n      entry.replace(pkgre, '$1') : null\n    const rootNM = isRoot && entry === 'node_modules'\n    const rootPJ = isRoot && entry === 'package.json'\n\n    return (\n      // if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) ? this.parent.filterEntry(\n          this.basename + '/' + entry, partial)\n\n      // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? -1 !== this.bundled.indexOf(pkg) ||\n        -1 !== this.bundledScopes.indexOf(pkg)\n\n      // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length\n\n      // always include package.json at the root.\n      : rootPJ ? true\n\n      // otherwise, follow ignore-walk's logic\n      : super.filterEntry(entry, partial)\n    )\n  }\n\n  filterEntries () {\n    if (this.ignoreRules['package.json'])\n      this.ignoreRules['.gitignore'] = this.ignoreRules['.npmignore'] = null\n    else if (this.ignoreRules['.npmignore'])\n      this.ignoreRules['.gitignore'] = null\n    this.filterEntries = super.filterEntries\n    super.filterEntries()\n  }\n\n  addIgnoreFile (file, then) {\n    const ig = path.resolve(this.path, file)\n    if (this.packageJsonCache.has(ig))\n      this.onPackageJson(ig, this.packageJsonCache.get(ig), then)\n    else\n      super.addIgnoreFile(file, then)\n  }\n\n  onPackageJson (ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg)\n\n    // if there's a bin, browser or main, make sure we don't ignore it\n    // also, don't ignore the package.json itself!\n    //\n    // Weird side-effect of this: a readme (etc) file will be included\n    // if it exists anywhere within a folder with a package.json file.\n    // The original intent was only to include these files in the root,\n    // but now users in the wild are dependent on that behavior for\n    // localized documentation and other use cases.  Adding a `/` to\n    // these rules, while tempting and arguably more \"correct\", is a\n    // breaking change.\n    const rules = [\n      pkg.browser ? '!' + pkg.browser : '',\n      pkg.main ? '!' + pkg.main : '',\n      '!package.json',\n      '!npm-shrinkwrap.json',\n      '!@(readme|copying|license|licence|notice|changes|changelog|history){,.*[^~$]}'\n    ]\n    if (pkg.bin) {\n      // always an object, because normalized already\n      for (const key in pkg.bin)\n        rules.push('!' + pkg.bin[key])\n    }\n\n    const data = rules.filter(f => f).join('\\n') + '\\n'\n    super.onReadIgnoreFile(packageNecessaryRules, data, _=>_)\n\n    if (Array.isArray(pkg.files))\n      super.onReadIgnoreFile('package.json', '*\\n' + pkg.files.map(\n        f => '!' + f + '\\n!' + f.replace(/\\/+$/, '') + '/**'\n      ).join('\\n') + '\\n', then)\n    else\n      then()\n  }\n\n  // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n  stat (entry, file, dir, then) {\n    if (nameIsBadForWindows(entry))\n      then()\n    else\n      super.stat(entry, file, dir, then)\n  }\n\n  // override parent onstat function to nix all symlinks\n  onstat (st, entry, file, dir, then) {\n    if (st.isSymbolicLink())\n      then()\n    else\n      super.onstat(st, entry, file, dir, then)\n  }\n\n  onReadIgnoreFile (file, data, then) {\n    if (file === 'package.json')\n      try {\n        const ig = path.resolve(this.path, file)\n        this.onPackageJson(ig, normalizePackageBin(JSON.parse(data)), then)\n      } catch (er) {\n        // ignore package.json files that are not json\n        then()\n      }\n    else\n      super.onReadIgnoreFile(file, data, then)\n  }\n\n  sort (a, b) {\n    return sort(a, b)\n  }\n}\n\nclass Walker extends npmWalker(IgnoreWalker) {\n  walker (entry, then) {\n    new Walker(this.walkerOpt(entry)).on('done', then).start()\n  }\n}\n\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  walker (entry, then) {\n    new WalkerSync(this.walkerOpt(entry)).start()\n    then()\n  }\n}\n\nconst walk = (options, callback) => {\n  options = options || {}\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options)\n    bw.on('done', bundled => {\n      options.bundled = bundled\n      options.packageJsonCache = bw.packageJsonCache\n      new Walker(options).on('done', resolve).on('error', reject).start()\n    })\n    bw.start()\n  })\n  return callback ? p.then(res => callback(null, res), callback) : p\n}\n\nconst walkSync = options => {\n  options = options || {}\n  const bw = new BundleWalkerSync(options).start()\n  options.bundled = bw.result\n  options.packageJsonCache = bw.packageJsonCache\n  const walker = new WalkerSync(options)\n  walker.start()\n  return walker.result\n}\n\n// optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase()\n  const extb = path.extname(b).toLowerCase()\n  const basea = path.basename(a).toLowerCase()\n  const baseb = path.basename(b).toLowerCase()\n\n  return exta.localeCompare(extb) ||\n    basea.localeCompare(baseb) ||\n    a.localeCompare(b)\n}\n\n\nmodule.exports = walk\nwalk.sync = walkSync\nwalk.Walker = Walker\nwalk.WalkerSync = WalkerSync\n"]},"metadata":{},"sourceType":"script"}